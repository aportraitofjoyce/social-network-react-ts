{"version":3,"sources":["components/Content/Profile/MyProfile/MyProfile.module.css","components/Content/Sidebar/Sidebar.module.css","components/Content/Profile/MyPosts/MyPosts.module.css","components/Content/Profile/MyPosts/Post/Post.module.css","components/Content/Content.module.css","components/Content/Profile/Profile.module.css","reportWebVitals.ts","components/Content/Sidebar/SidebarItem/SidebarItem.tsx","components/Content/Sidebar/Sidebar.tsx","components/Content/Dialogs/FriendsContainer/Friend/Friend.tsx","components/Content/Dialogs/FriendsContainer/FriendsContainer.tsx","components/Content/Dialogs/DialogsContainer/Message/Message.tsx","redux/state.ts","components/Content/Dialogs/DialogsContainer/DialogsControl/DialogsControl.tsx","components/Content/Dialogs/DialogsContainer/DialogsContainer.tsx","components/Content/Dialogs/Dialogs.tsx","components/Content/Profile/MyPosts/Post/Post.tsx","components/Content/Profile/MyPosts/PostControl/PostControl.tsx","components/Content/Profile/MyPosts/MyPosts.tsx","components/Content/Profile/MyProfile/MyAvatar/MyAvatar.tsx","components/Content/Profile/MyProfile/MyInfo/MyInfo.tsx","components/Content/Profile/MyProfile/MyProfile.tsx","components/Content/Profile/Profile.tsx","App.tsx","index.tsx","components/Content/Dialogs/Dialogs.module.css"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","SidebarItem","props","to","link","activeClassName","s","active","name","Sidebar","mappedSidebarItems","dataForSidebar","map","item","v1","className","wrapper","container","Friend","id","friend","FriendsContainer","dialogWithFriend","dataForFriends","friendsContainer","Message","messageWrapper","avatar","src","alt","messageContainer","from","message","ADD_POST","UPDATE_POST_TEXT","SEND_MESSAGE","UPDATE_MESSAGE_TEXT","store","_state","sidebar","profile","dataForMyProfile","title","dataForMyPosts","text","likes","newPost","dialogs","dataForMessages","newMessage","getState","this","subscribe","observer","_callSubscriber","console","log","dispatch","action","type","_addPost","_updatePostText","_sendMessage","_updateMessageText","copyOfNewPost","unshift","copyOfNewMessage","push","updatePostActionCreator","updateMessageTextActionCreator","DialogsControl","controlContainer","placeholder","onChange","e","currentTarget","value","textForNewMessage","onClick","DialogsContainer","mappedMessages","dialogsWrapper","dialogsContainer","Dialogs","Post","avatar_container","content_container","PostsControl","control_wrapper","textForNewPost","MyPosts","mappedPosts","MyAvatar","avatar_wrapper","MyInfo","info_wrapper","MyProfile","Profile","App","state","path","render","rerenderEntireTree","ReactDOM","StrictMode","bind","document","getElementById"],"mappings":"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","file":"static/js/main.a0520d63.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"MyProfile_wrapper__3A1u1\",\"avatar_wrapper\":\"MyProfile_avatar_wrapper__DcgXL\",\"info_wrapper\":\"MyProfile_info_wrapper__596au\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Sidebar_wrapper__22-aA\",\"container\":\"Sidebar_container__15Ntz\",\"active\":\"Sidebar_active__2ACgB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"MyPosts_wrapper__3R-tq\",\"control_wrapper\":\"MyPosts_control_wrapper__zBDjv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Post_wrapper__N5j31\",\"avatar_container\":\"Post_avatar_container__32rgp\",\"content_container\":\"Post_content_container__1i4J_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Content_wrapper__Q2Slt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Profile_wrapper__G1un2\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport s from \"../Sidebar.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype SidebarItemPropsType = {\r\n    link: string\r\n    name: string\r\n}\r\n\r\nexport function SidebarItem(props: SidebarItemPropsType) {\r\n    return <NavLink to={props.link} activeClassName={s.active}>{props.name}</NavLink>\r\n}","import React from \"react\";\r\nimport s from './Sidebar.module.css'\r\nimport {SidebarItem} from \"./SidebarItem/SidebarItem\";\r\nimport {dataForSidebarType, SidebarType} from \"../../../redux/state\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport function Sidebar(props: SidebarType) {\r\n\r\n    const mappedSidebarItems = props.dataForSidebar.map((item: dataForSidebarType) => {\r\n        return <SidebarItem key={v1()} name={item.name} link={item.link}/>\r\n    })\r\n\r\n    return (\r\n        <aside className={s.wrapper}>\r\n            <nav className={s.container}>\r\n                {mappedSidebarItems}\r\n            </nav>\r\n        </aside>\r\n    )\r\n}\r\n\r\n","import {NavLink} from \"react-router-dom\";\r\nimport s from \"../../Dialogs.module.css\";\r\nimport React from \"react\";\r\nimport {DataForFriendsType} from \"../../../../../redux/state\";\r\n\r\nexport function Friend(props: DataForFriendsType) {\r\n    return (\r\n        <NavLink to={'/dialogs/' + props.id} className={s.friend} activeClassName={s.active}>\r\n            {props.name}\r\n        </NavLink>\r\n    )\r\n}","import s from \"../Dialogs.module.css\";\r\nimport React from \"react\";\r\nimport {Friend} from \"./Friend/Friend\";\r\nimport {DataForFriendsType} from \"../../../../redux/state\";\r\n\r\ntype FriendsContainerPropsType = {\r\n    dataForFriends: DataForFriendsType[]\r\n}\r\n\r\nexport function FriendsContainer(props: FriendsContainerPropsType) {\r\n    const dialogWithFriend = props.dataForFriends.map((item: DataForFriendsType) => <Friend key={item.id} id={item.id} name={item.name}/>)\r\n\r\n    return (\r\n        <div className={s.friendsContainer}>\r\n            {dialogWithFriend}\r\n        </div>\r\n    )\r\n}\r\n\r\n","import s from \"../../Dialogs.module.css\";\r\nimport React from \"react\";\r\n\r\ntype MessagePropsType = {\r\n    id: string\r\n    from: string\r\n    message: string\r\n}\r\n\r\nexport function Message(props: MessagePropsType) {\r\n\r\n    return (\r\n        <div className={s.messageWrapper}>\r\n            <div className={s.avatar}>\r\n                <img src='https://sun9-5.userapi.com/impf/c836635/v836635330/314ed/9md97EBkSPg.jpg?size=600x600&quality=96&sign=302798ae13b76abf476b1e71420b702f&type=album' alt='qq'/>\r\n            </div>\r\n            <div className={s.messageContainer}>\r\n                <div><b>{props.from}:</b></div>\r\n                <div>{props.message}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {v1} from \"uuid\";\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst UPDATE_POST_TEXT = 'UPDATE-POST-TEXT';\r\nconst SEND_MESSAGE = 'SEND-MESSAGE'\r\nconst UPDATE_MESSAGE_TEXT = 'UPDATE-MESSAGE-TEXT'\r\n\r\nexport const store: StoreType = {\r\n    _state: {\r\n        sidebar: {\r\n            dataForSidebar: [\r\n                {name: 'My profile', link: '/profile'},\r\n                {name: 'Messages', link: '/dialogs'},\r\n            ]\r\n        },\r\n\r\n        profile: {\r\n            dataForMyProfile: {\r\n                src: \"https://sun9-5.userapi.com/impf/c836635/v836635330/314ed/9md97EBkSPg.jpg?size=600x600&quality=96&sign=302798ae13b76abf476b1e71420b702f&type=album\",\r\n                alt: \"My profile\",\r\n                title: 'Илья Садовский'\r\n            },\r\n            dataForMyPosts: [\r\n                {\r\n                    src: \"https://sun9-5.userapi.com/impf/c836635/v836635330/314ed/9md97EBkSPg.jpg?size=600x600&quality=96&sign=302798ae13b76abf476b1e71420b702f&type=album\",\r\n                    alt: \"My profile\",\r\n                    text: 'My first post',\r\n                    likes: 10\r\n                },\r\n                {\r\n                    src: \"https://sun9-5.userapi.com/impf/c836635/v836635330/314ed/9md97EBkSPg.jpg?size=600x600&quality=96&sign=302798ae13b76abf476b1e71420b702f&type=album\",\r\n                    alt: \"My profile\",\r\n                    text: 'My second post',\r\n                    likes: 5\r\n                },\r\n                {\r\n                    src: \"https://sun9-5.userapi.com/impf/c836635/v836635330/314ed/9md97EBkSPg.jpg?size=600x600&quality=96&sign=302798ae13b76abf476b1e71420b702f&type=album\",\r\n                    alt: \"My profile\",\r\n                    text: 'My third post',\r\n                    likes: 43\r\n                },\r\n                {\r\n                    src: \"https://sun9-5.userapi.com/impf/c836635/v836635330/314ed/9md97EBkSPg.jpg?size=600x600&quality=96&sign=302798ae13b76abf476b1e71420b702f&type=album\",\r\n                    alt: \"My profile\",\r\n                    text: 'My fourth post',\r\n                    likes: 0\r\n                }\r\n            ],\r\n            newPost: {\r\n                src: \"https://sun9-5.userapi.com/impf/c836635/v836635330/314ed/9md97EBkSPg.jpg?size=600x600&quality=96&sign=302798ae13b76abf476b1e71420b702f&type=album\",\r\n                alt: \"My profile\",\r\n                text: 'Что-то чтобы не вводить для тестов',\r\n                likes: 0\r\n            }\r\n        },\r\n\r\n        dialogs: {\r\n            dataForFriends: [\r\n                {id: v1(), name: 'Me'},\r\n                {id: v1(), name: 'Maxim'},\r\n                {id: v1(), name: 'Andrei'},\r\n                {id: v1(), name: 'Yura'}\r\n            ],\r\n\r\n            dataForMessages: [\r\n                {id: v1(), from: 'Me', message: 'Привет, как дела?'},\r\n                {id: v1(), from: 'Andrei', message: 'Ку-ку, отлично. А у тебя?'},\r\n                {id: v1(), from: 'Me', message: 'Плохо, монитор из сервисного центре не отдают!'},\r\n                {id: v1(), from: 'Me', message: 'Пользуются им уже дольше чем я'},\r\n                {id: v1(), from: 'Andrei', message: 'Козлы'},\r\n                {id: v1(), from: 'Me', message: 'Ага!'},\r\n            ],\r\n\r\n            newMessage: {id: v1(), from: 'Me', message: ''}\r\n        }\r\n    },\r\n\r\n    getState(): StateType {\r\n        return this._state\r\n    },\r\n\r\n    // Принимает rerenderEntireTree и дает привязку пустой функции _callSubscriber для перевызова и отрисовки\r\n    subscribe(observer: () => void) {\r\n        this._callSubscriber = observer\r\n        console.log('subscribe')\r\n    },\r\n\r\n    _callSubscriber() {\r\n    },\r\n\r\n    dispatch(action) {\r\n        switch (action.type) {\r\n            case ADD_POST:\r\n                this._addPost();\r\n                break\r\n            case UPDATE_POST_TEXT:\r\n                this._updatePostText(action.text);\r\n                break\r\n            case SEND_MESSAGE:\r\n                this._sendMessage();\r\n                break\r\n            case UPDATE_MESSAGE_TEXT:\r\n                this._updateMessageText(action.text);\r\n                break\r\n        }\r\n    },\r\n\r\n    _addPost() {\r\n        const copyOfNewPost = {...this._state.profile.newPost}\r\n        this._state.profile.dataForMyPosts.unshift(copyOfNewPost)\r\n        this._callSubscriber()\r\n    },\r\n\r\n    _updatePostText(text: string) {\r\n        this._state.profile.newPost.text = text\r\n        this._callSubscriber()\r\n    },\r\n\r\n    _sendMessage() {\r\n        const copyOfNewMessage = {...this._state.dialogs.newMessage}\r\n        this._state.dialogs.dataForMessages.push(copyOfNewMessage)\r\n        this._callSubscriber()\r\n    },\r\n\r\n    _updateMessageText(text: string) {\r\n        store._state.dialogs.newMessage.message = text\r\n        store._callSubscriber()\r\n    }\r\n}\r\n\r\n// Action Creators\r\nexport const addPostActionCreator = () => {\r\n    return {type: ADD_POST}\r\n}\r\n\r\nexport const updatePostActionCreator = (text: string) => {\r\n    return {type: UPDATE_POST_TEXT, text: text}\r\n}\r\n\r\nexport const sendMessageActionCreator = () => {\r\n    return {type: SEND_MESSAGE}\r\n}\r\n\r\nexport const updateMessageTextActionCreator = (text: string) => {\r\n    return {type: UPDATE_MESSAGE_TEXT, text: text}\r\n}\r\n\r\n\r\n// TypeScript\r\ntype StoreType = {\r\n    _state: StateType\r\n    getState: () => StateType\r\n    subscribe: (observer: () => void) => void\r\n    _callSubscriber: () => void\r\n    dispatch: (action: any) => void\r\n    _addPost: () => void\r\n    _updatePostText: (postText: string) => void\r\n    _sendMessage: () => void\r\n    _updateMessageText: (text: string) => void\r\n\r\n}\r\n\r\nexport type StateType = {\r\n    sidebar: SidebarType\r\n    profile: ProfileType\r\n    dialogs: DialogsType\r\n}\r\n\r\nexport type SidebarType = {\r\n    dataForSidebar: dataForSidebarType[]\r\n}\r\n\r\nexport type ProfileType = {\r\n    dataForMyProfile: dataForMyProfileType\r\n    dataForMyPosts: dataForMyPostsType[]\r\n    newPost: dataForMyPostsType\r\n}\r\n\r\nexport type DialogsType = {\r\n    dataForFriends: DataForFriendsType[]\r\n    dataForMessages: MessagesDataType[]\r\n    newMessage: MessagesDataType\r\n}\r\n\r\nexport type dataForSidebarType = {\r\n    name: string\r\n    link: string\r\n}\r\n\r\nexport type dataForMyProfileType = {\r\n    src: string\r\n    alt: string\r\n    title: string\r\n}\r\n\r\nexport type dataForMyPostsType = {\r\n    src: string\r\n    alt: string\r\n    text: string\r\n    likes: number\r\n}\r\n\r\nexport type DataForFriendsType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\nexport type MessagesDataType = {\r\n    id: string\r\n    from: string\r\n    message: string\r\n}","import s from \"../../Dialogs.module.css\";\r\nimport React, {ChangeEvent} from \"react\";\r\nimport {sendMessageActionCreator, updateMessageTextActionCreator} from \"../../../../../redux/state\";\r\n\r\ntype DialogsControlPropsType = {\r\n    dispatch: (action: object) => void\r\n    textForNewMessage: string\r\n}\r\n\r\nexport const DialogsControl: React.FC<DialogsControlPropsType> = (props) => {\r\n\r\n    const sendNewMessage = () => {\r\n        props.dispatch(sendMessageActionCreator())\r\n        props.dispatch(updateMessageTextActionCreator(''))\r\n    }\r\n\r\n    const changeMessageHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.dispatch(updateMessageTextActionCreator(e.currentTarget.value))\r\n    }\r\n\r\n    return (\r\n        <div className={s.controlContainer}>\r\n            <textarea placeholder={'Say something'} onChange={changeMessageHandler} value={props.textForNewMessage}/>\r\n            <button onClick={sendNewMessage}>Add</button>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"../Dialogs.module.css\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogsControl} from \"./DialogsControl/DialogsControl\";\r\nimport {v1} from \"uuid\";\r\n\r\ntype DialogsContainerPropsType = {\r\n    dataForMessages: DialogsContainerDataForMessagesPropsType[]\r\n    dispatch: (action: object) => void\r\n    textForNewMessage: string\r\n}\r\n\r\ntype DialogsContainerDataForMessagesPropsType = {\r\n    id: string\r\n    from: string\r\n    message: string\r\n}\r\n\r\nexport const DialogsContainer: React.FC<DialogsContainerPropsType> = (props) => {\r\n\r\n    const mappedMessages = props.dataForMessages.map((item: DialogsContainerDataForMessagesPropsType) => <Message\r\n        key={v1()} from={item.from} message={item.message} id={item.id}/>)\r\n\r\n    return (\r\n        <div className={s.dialogsWrapper}>\r\n            <div className={s.dialogsContainer}>\r\n                {mappedMessages}\r\n            </div>\r\n            <DialogsControl\r\n                dispatch={props.dispatch}\r\n                textForNewMessage={props.textForNewMessage}\r\n            />\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './Dialogs.module.css'\r\nimport {FriendsContainer} from \"./FriendsContainer/FriendsContainer\";\r\nimport {DialogsContainer} from \"./DialogsContainer/DialogsContainer\";\r\nimport {DataForFriendsType, MessagesDataType} from \"../../../redux/state\";\r\n\r\ntype DialogsPropsType = {\r\n    dataForFriends: DataForFriendsType[]\r\n    dataForMessages: MessagesDataType[]\r\n    dispatch: (action: object) => void\r\n    textForNewMessage: string\r\n}\r\n\r\nexport const Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n    return (\r\n        <main className={s.wrapper}>\r\n            <FriendsContainer dataForFriends={props.dataForFriends}/>\r\n            <DialogsContainer\r\n                dataForMessages={props.dataForMessages}\r\n                dispatch={props.dispatch}\r\n                textForNewMessage={props.textForNewMessage}\r\n            />\r\n        </main>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './Post.module.css'\r\n\r\ntype PostPropsType = {\r\n    src: string\r\n    alt: string\r\n    text: string\r\n    likes: number\r\n}\r\n\r\nexport function Post(props: PostPropsType) {\r\n    return (\r\n        <div className={s.wrapper}>\r\n\r\n            <div className={s.avatar_container}>\r\n                <img src={props.src} alt={props.alt}/>\r\n            </div>\r\n\r\n            <div className={s.content_container}>\r\n                <div>{props.text}</div>\r\n                <div>Likes: {props.likes}</div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import s from \"../MyPosts.module.css\";\r\nimport React, {ChangeEvent} from \"react\";\r\nimport {addPostActionCreator, updatePostActionCreator} from \"../../../../../redux/state\";\r\n\r\ntype PostControlPropsType = {\r\n    dispatch: (action: object) => void\r\n    textForNewPost: string\r\n}\r\n\r\nexport const PostsControl: React.FC<PostControlPropsType> = (props) => {\r\n\r\n    const addPostHandler = () => {\r\n        props.dispatch(addPostActionCreator())\r\n        props.dispatch(updatePostActionCreator(''))\r\n    }\r\n\r\n    const changePostHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.dispatch(updatePostActionCreator(e.currentTarget.value))\r\n    }\r\n\r\n    return (\r\n        <div className={s.control_wrapper}>\r\n            <textarea placeholder={'Say something'} onChange={changePostHandler} value={props.textForNewPost}/>\r\n            <button onClick={addPostHandler}>Add</button>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './MyPosts.module.css'\r\nimport {Post} from \"./Post/Post\";\r\nimport {PostsControl} from \"./PostControl/PostControl\";\r\nimport {v1} from \"uuid\";\r\n\r\ntype MyPostsPropsType = {\r\n    dataForMyPosts: MyPostsDataForMyPostsPropsType[]\r\n    dispatch: (action: any) => void\r\n    textForNewPost: string\r\n}\r\ntype MyPostsDataForMyPostsPropsType = {\r\n    text: string\r\n    src: string\r\n    alt: string\r\n    likes: number\r\n}\r\n\r\nexport const MyPosts: React.FC<MyPostsPropsType> = (props) => {\r\n    const mappedPosts = props.dataForMyPosts.map((item: MyPostsDataForMyPostsPropsType) => {\r\n        return <Post key={v1()} text={item.text} src={item.src} alt={item.alt} likes={item.likes}/>\r\n    })\r\n\r\n    return (\r\n        <section className={s.wrapper}>\r\n            <PostsControl dispatch={props.dispatch} textForNewPost={props.textForNewPost}/>\r\n            {mappedPosts}\r\n        </section>\r\n    )\r\n}","import s from \"../MyProfile.module.css\";\r\nimport React from \"react\";\r\n\r\ntype MyAvatarPropsType = {\r\n    src: string\r\n    alt: string\r\n}\r\n\r\nexport function MyAvatar(props: MyAvatarPropsType) {\r\n    return (\r\n        <div className={s.avatar_wrapper}>\r\n            <img\r\n                src={props.src}\r\n                alt={props.alt}/>\r\n        </div>\r\n    )\r\n}","import s from \"../MyProfile.module.css\";\r\nimport React from \"react\";\r\n\r\ntype MyInfoPropsType = {\r\n    title: string\r\n}\r\n\r\nexport function MyInfo(props: MyInfoPropsType) {\r\n    return (\r\n        <div className={s.info_wrapper}>\r\n            <h3>{props.title}</h3>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './MyProfile.module.css'\r\nimport {MyAvatar} from \"./MyAvatar/MyAvatar\";\r\nimport {MyInfo} from \"./MyInfo/MyInfo\";\r\n\r\ntype MyProfilePropsType = {\r\n    dataForMyProfile: {\r\n        src: string\r\n        alt: string\r\n        title: string\r\n    }\r\n}\r\n\r\nexport function MyProfile(props: MyProfilePropsType) {\r\n    return (\r\n        <section className={s.wrapper}>\r\n            <MyAvatar src={props.dataForMyProfile.src} alt={props.dataForMyProfile.alt}/>\r\n            <MyInfo title={props.dataForMyProfile.title}/>\r\n        </section>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './Profile.module.css'\r\nimport {MyPosts} from \"./MyPosts/MyPosts\";\r\nimport {MyProfile} from \"./MyProfile/MyProfile\";\r\nimport {dataForMyPostsType, dataForMyProfileType} from \"../../../redux/state\";\r\n\r\ntype ProfilePropsType = {\r\n    dataForMyProfile: dataForMyProfileType\r\n    dataForMyPosts: dataForMyPostsType[]\r\n    dispatch: (action: object) => void\r\n    textForNewPost: string\r\n}\r\n\r\nexport const Profile: React.FC<ProfilePropsType> = (props) => {\r\n    return (\r\n        <main className={s.wrapper}>\r\n            <MyProfile dataForMyProfile={props.dataForMyProfile}/>\r\n            <MyPosts\r\n                dataForMyPosts={props.dataForMyPosts}\r\n                dispatch={props.dispatch}\r\n                textForNewPost={props.textForNewPost}\r\n            />\r\n        </main>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport {StateType} from \"./redux/state\";\nimport s from \"./components/Content/Content.module.css\";\nimport {Route} from \"react-router-dom\";\nimport {Sidebar} from \"./components/Content/Sidebar/Sidebar\";\nimport {Dialogs} from \"./components/Content/Dialogs/Dialogs\";\nimport {Profile} from \"./components/Content/Profile/Profile\";\n\ntype AppPropsType = {\n    state: StateType\n    dispatch: (action: object) => void\n}\n\nexport const App: React.FC<AppPropsType> = (props) => {\n    return (\n        <div className={'App'}>\n            <main className={s.wrapper}>\n                <Sidebar dataForSidebar={props.state.sidebar.dataForSidebar}/>\n\n                <Route path='/dialogs'\n                       render={() => <Dialogs\n                           dataForFriends={props.state.dialogs.dataForFriends}\n                           dataForMessages={props.state.dialogs.dataForMessages}\n                           textForNewMessage={props.state.dialogs.newMessage.message}\n                           dispatch={props.dispatch}\n                       />}\n                />\n\n                <Route path='/profile'\n                       render={() => <Profile\n                           dataForMyProfile={props.state.profile.dataForMyProfile}\n                           dataForMyPosts={props.state.profile.dataForMyPosts}\n                           dispatch={props.dispatch}\n                           textForNewPost={props.state.profile.newPost.text}\n                       />}\n                />\n            </main>\n        </div>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals'\nimport './index.css';\nimport {App} from \"./App\";\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\nimport {store} from \"./redux/state\";\n\nlet rerenderEntireTree = () => {\n    ReactDOM.render(\n        <React.StrictMode>\n            <HashRouter>\n                <App\n                    state={store.getState()}\n                    dispatch={store.dispatch.bind(store)}\n                />\n            </HashRouter>\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n}\n\nrerenderEntireTree()\n\nstore.subscribe(rerenderEntireTree)\n\nreportWebVitals()","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Dialogs_wrapper__2lGOo\",\"dialogsWrapper\":\"Dialogs_dialogsWrapper__NHRrX\",\"dialogsContainer\":\"Dialogs_dialogsContainer__3TyWQ\",\"friendsContainer\":\"Dialogs_friendsContainer__1d5Uj\",\"active\":\"Dialogs_active__2lvSI\",\"messageWrapper\":\"Dialogs_messageWrapper__E-afR\",\"avatar\":\"Dialogs_avatar__38FRk\",\"controlContainer\":\"Dialogs_controlContainer__1krq_\"};"],"sourceRoot":""}