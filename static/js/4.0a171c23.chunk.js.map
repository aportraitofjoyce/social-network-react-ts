{"version":3,"sources":["components/Content/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.tsx","components/UI/Form/FormTextarea/FormTextarea.tsx","components/UI/Form/SingleTextareaForm/SingleTextareaForm.tsx","components/Content/Dialogs/FriendsToChat/Friend/Friend.tsx","components/Content/Dialogs/FriendsToChat/FriendsToChat.tsx","components/Content/Dialogs/DialogsChat/Message/Message.tsx","components/Content/Dialogs/DialogsChat/DialogsForm/DialogsForm.tsx","components/Content/Dialogs/DialogsChat/DialogsChat.tsx","components/Content/Dialogs/Dialogs.tsx","components/Content/Dialogs/DialogsContainer.tsx"],"names":["module","exports","withAuthRedirect","Component","props","useSelector","state","auth","isAuth","to","PATH","LOGIN","FormTextarea","React","memo","label","useField","field","meta","className","s","formField","htmlFor","id","name","error","errorBorder","touched","errorMessage","SingleTextareaForm","onSubmit","initialValues","textarea","validationSchema","Yup","required","values","a","setSubmitting","resetForm","isSubmitting","placeholder","type","disabled","Friend","DIALOGS","friend","activeClassName","active","FriendsToChat","dialogWithFriend","dataForFriends","map","friendsContainer","Message","from","message","messageWrapper","avatar","src","alt","messageContainer","DialogsForm","controlContainer","DialogsChat","dataForMessages","sendMessage","mappedMessages","v1","dialogsWrapper","dialogsContainer","Dialogs","wrapper","DialogsContainer","dialogs","dispatch","useDispatch","sendMessageHandler","useCallback","text","compose"],"mappings":"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","file":"static/js/4.0a171c23.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Dialogs_wrapper__OXmKF\",\"dialogsWrapper\":\"Dialogs_dialogsWrapper__dCwpn\",\"dialogsContainer\":\"Dialogs_dialogsContainer__CDolV\",\"friendsContainer\":\"Dialogs_friendsContainer__YeVKw\",\"active\":\"Dialogs_active__3y7fC\",\"messageWrapper\":\"Dialogs_messageWrapper__IjTOH\",\"avatar\":\"Dialogs_avatar__2vOPD\",\"controlContainer\":\"Dialogs_controlContainer__1HQ5X\"};","import React, {ComponentType} from 'react'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {PATH, StateType} from '../types/common-types'\r\nimport {useSelector} from 'react-redux'\r\n\r\ntype AuthRedirectPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nexport const withAuthRedirect = <T extends AuthRedirectPropsType>(Component: ComponentType<T>) => {\r\n\r\n    const AuthRedirect: React.FC<AuthRedirectPropsType & T> = props => {\r\n\r\n        const isAuth = useSelector<StateType>(state => state.auth.isAuth)\r\n        if (!isAuth) return <Redirect to={PATH.LOGIN}/>\r\n\r\n        return <Component {...props}/>\r\n    }\r\n\r\n    return AuthRedirect\r\n}","import React from 'react'\r\nimport {useField} from 'formik'\r\nimport s from '../Form.module.css'\r\n\r\ntype FormTextareaPropsType = {\r\n    label?: string\r\n    name: string\r\n    placeholder: string\r\n    id?: string\r\n}\r\n\r\nexport const FormTextarea: React.FC<FormTextareaPropsType> = React.memo(({label, ...props}) => {\r\n    const [field, meta] = useField(props)\r\n    return (\r\n        <div className={s.formField}>\r\n\r\n            <label htmlFor={props.id || props.name}>{label}</label>\r\n\r\n            <textarea {...field} {...props} className={meta.error ? s.errorBorder : ''}/>\r\n\r\n            {meta.touched && meta.error && <div className={s.errorMessage}>{meta.error}</div>}\r\n        </div>\r\n    )\r\n})","import React from 'react'\r\nimport * as Yup from 'yup'\r\nimport {Form, Formik} from 'formik'\r\nimport {FormTextarea} from '../FormTextarea/FormTextarea'\r\n\r\ntype SingleTextareaFormPropsType = {\r\n    onSubmit: (text: string) => void\r\n}\r\n\r\nexport const SingleTextareaForm: React.FC<SingleTextareaFormPropsType> = React.memo(props => {\r\n    const {onSubmit} = props\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{textarea: ''}}\r\n\r\n            validationSchema={Yup.object({\r\n                textarea: Yup.string()\r\n                    .required('Required'),\r\n            })}\r\n\r\n            onSubmit={async (values, {setSubmitting, resetForm}) => {\r\n                await setSubmitting(true)\r\n                await resetForm()\r\n                await onSubmit(values.textarea)\r\n            }}>\r\n\r\n            {({isSubmitting}) => <Form>\r\n                <FormTextarea name='textarea'\r\n                              placeholder='Type your message...'/>\r\n                <button type={'submit'} disabled={isSubmitting}>Send</button>\r\n            </Form>}\r\n        </Formik>\r\n    )\r\n})","import {NavLink} from 'react-router-dom'\r\nimport s from '../../Dialogs.module.css'\r\nimport React from 'react'\r\nimport {PATH} from '../../../../../types/common-types'\r\n\r\ntype FriendPropsType = {\r\n    name: string\r\n}\r\n\r\nexport const Friend: React.FC<FriendPropsType> = React.memo(props => {\r\n    const {name} = props\r\n\r\n    return (\r\n        <NavLink to={PATH.DIALOGS}\r\n                 className={s.friend}\r\n                 activeClassName={s.active}>\r\n            {name}\r\n        </NavLink>\r\n    )\r\n})","import s from '../Dialogs.module.css'\r\nimport React from 'react'\r\nimport {Friend} from './Friend/Friend'\r\nimport {DataForFriendsType} from '../../../../types/dialogs-types'\r\n\r\ntype FriendsContainerPropsType = {\r\n    dataForFriends: DataForFriendsType[]\r\n}\r\n\r\nexport const FriendsToChat: React.FC<FriendsContainerPropsType> = React.memo(props => {\r\n    const {dataForFriends} = props\r\n\r\n    const dialogWithFriend = dataForFriends.map(friend => <Friend key={friend.id}\r\n                                                                  name={friend.name}/>)\r\n\r\n    return (\r\n        <div className={s.friendsContainer}>\r\n            {dialogWithFriend}\r\n        </div>\r\n    )\r\n})\r\n\r\n","import s from '../../Dialogs.module.css'\r\nimport React from 'react'\r\n\r\ntype MessagePropsType = {\r\n    from: string\r\n    message: string\r\n}\r\n\r\nexport const Message: React.FC<MessagePropsType> = React.memo(props => {\r\n    const {from, message} = props\r\n\r\n    return (\r\n        <div className={s.messageWrapper}>\r\n            <div className={s.avatar}>\r\n                <img\r\n                    src='https://sun9-5.userapi.com/impf/c836635/v836635330/314ed/9md97EBkSPg.jpg?size=600x600&quality=96&sign=302798ae13b76abf476b1e71420b702f&type=album'\r\n                    alt='qq'/>\r\n            </div>\r\n            <div className={s.messageContainer}>\r\n                <div><strong>{from}:</strong></div>\r\n                <div>{message}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import s from '../../Dialogs.module.css'\r\nimport React from 'react'\r\nimport {SingleTextareaForm} from '../../../../UI/Form/SingleTextareaForm/SingleTextareaForm'\r\n\r\ntype DialogsControlPropsType = {\r\n    onSubmit: (text: string) => void\r\n}\r\n\r\nexport const DialogsForm: React.FC<DialogsControlPropsType> = React.memo(props => {\r\n    const {onSubmit} = props\r\n\r\n    return (\r\n        <div className={s.controlContainer}>\r\n            <SingleTextareaForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n})","import React from 'react'\r\nimport s from '../Dialogs.module.css'\r\nimport {Message} from './Message/Message'\r\nimport {DialogsForm} from './DialogsForm/DialogsForm'\r\nimport {v1} from 'uuid'\r\nimport {MessagesDataType} from '../../../../types/dialogs-types'\r\n\r\ntype DialogsContainerPropsType = {\r\n    dataForMessages: MessagesDataType[]\r\n    sendMessage: (text: string) => void\r\n}\r\n\r\nexport const DialogsChat: React.FC<DialogsContainerPropsType> = React.memo(props => {\r\n    const {dataForMessages, sendMessage} = props\r\n\r\n    const mappedMessages = dataForMessages.map(message => <Message key={v1()}\r\n                                                                   from={message.from}\r\n                                                                   message={message.message}/>)\r\n\r\n    return (\r\n        <div className={s.dialogsWrapper}>\r\n            <div className={s.dialogsContainer}>\r\n                {mappedMessages}\r\n            </div>\r\n            <DialogsForm onSubmit={sendMessage}/>\r\n        </div>\r\n    )\r\n})","import React from 'react'\r\nimport s from './Dialogs.module.css'\r\nimport {FriendsToChat} from './FriendsToChat/FriendsToChat'\r\nimport {DialogsChat} from './DialogsChat/DialogsChat'\r\nimport {DataForFriendsType, MessagesDataType} from '../../../types/dialogs-types'\r\n\r\ntype DialogsPropsType = {\r\n    dataForMessages: MessagesDataType[]\r\n    sendMessage: (text: string) => void\r\n    dataForFriends: DataForFriendsType[]\r\n}\r\n\r\nexport const Dialogs: React.FC<DialogsPropsType> = React.memo(props => {\r\n    const {dataForMessages, dataForFriends, sendMessage} = props\r\n\r\n    return (\r\n        <main className={s.wrapper}>\r\n            <FriendsToChat dataForFriends={dataForFriends}/>\r\n            <DialogsChat\r\n                dataForMessages={dataForMessages}\r\n                sendMessage={sendMessage}/>\r\n        </main>\r\n    )\r\n})","import React, {ComponentType, useCallback} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {Dialogs} from './Dialogs'\r\nimport {StateType} from '../../../types/common-types'\r\nimport {sendMessage} from '../../../redux/actions/dialogs-actions'\r\nimport {DialogsType} from '../../../types/dialogs-types'\r\nimport {withAuthRedirect} from '../../../hoc/withAuthRedirect'\r\nimport {compose} from 'redux'\r\n\r\nconst DialogsContainer: React.FC = React.memo(() => {\r\n    const {dataForMessages, dataForFriends} = useSelector<StateType, DialogsType>(state => state.dialogs)\r\n    const dispatch = useDispatch()\r\n\r\n    const sendMessageHandler = useCallback((text: string) => dispatch(sendMessage(text)), [dispatch])\r\n\r\n    return <Dialogs dataForMessages={dataForMessages}\r\n                    dataForFriends={dataForFriends}\r\n                    sendMessage={sendMessageHandler}/>\r\n})\r\n\r\nexport default compose<ComponentType>(withAuthRedirect)(DialogsContainer)"],"sourceRoot":""}