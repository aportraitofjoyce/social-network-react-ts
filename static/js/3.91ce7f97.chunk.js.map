{"version":3,"sources":["components/UI/Form/FormTextarea/FormTextarea.tsx","components/Content/Profile/MyProfile/MyProfile.module.css","components/UI/Form/SingleTextareaForm/SingleTextareaForm.tsx","hoc/withAuthRedirect.tsx","components/Content/Profile/MyPosts/MyPosts.module.css","components/Content/Profile/Profile.module.css","components/Content/Profile/MyPosts/Post/Post.module.css","components/Content/Profile/MyPosts/Post/Post.tsx","components/Content/Profile/MyPosts/PostForm/PostForm.tsx","components/Content/Profile/MyPosts/MyPosts.tsx","components/Content/Profile/MyProfile/MyAvatar/MyAvatar.tsx","components/Content/Profile/MyProfile/MyInfo/MyStatus/MyStatus.tsx","components/Content/Profile/MyProfile/MyInfo/MyDescription/MyContacts/MyContacts.tsx","components/Content/Profile/MyProfile/MyInfo/MyDescription/MyDescription.tsx","components/Content/Profile/MyProfile/MyInfo/MyDescriptionEditForm/MyDescriptionEditForm.tsx","components/Content/Profile/MyProfile/MyInfo/MyInfo.tsx","components/Content/Profile/MyProfile/MyProfile.tsx","components/Content/Profile/Profile.tsx","components/Content/Profile/ProfileContainer.tsx"],"names":["FormTextarea","React","memo","label","props","useField","field","meta","className","s","formField","htmlFor","id","name","error","errorBorder","touched","errorMessage","module","exports","SingleTextareaForm","onSubmit","initialValues","textarea","validationSchema","Yup","required","values","a","setSubmitting","resetForm","isSubmitting","placeholder","type","disabled","withAuthRedirect","Component","useSelector","state","auth","isAuth","to","PATH","LOGIN","Post","wrapper","avatar_container","src","alt","content_container","text","likes","PostsForm","control_wrapper","MyPosts","addPost","dataForMyPosts","mappedPosts","useMemo","map","item","v1","MyAvatar","isOwner","updateUserAvatar","avatarContainer","onChange","e","currentTarget","files","value","MyStatus","status","updateUserStatus","useState","editMode","setEditMode","title","setTitle","useEffect","onEditMode","useCallback","offEditMode","onChangeHandler","onKeyPressHandler","key","onBlur","onKeyPress","autoFocus","onDoubleClick","MyContacts","MyDescription","userProfile","descriptionContainer","descriptionItem","aboutMe","lookingForAJob","lookingForAJobDescription","Object","keys","contacts","contact","onClick","MyDescriptionEditForm","URLValidation","matches","contactsValidation","reduce","acc","fullName","max","FormInput","FormCheckbox","MyInfo","userStatus","updateUserDescription","userDescription","infoContainer","MyProfile","avatarSRC","photos","large","Profile","ProfileContainer","match","dispatch","useDispatch","profile","addPostHandler","updateUserStatusHandler","updateUserAvatarHandler","avatarFile","updateUserDescriptionHandler","userID","Number","params","userId","getUserProfile","getUserStatus","compose","withRouter"],"mappings":"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","file":"static/js/3.91ce7f97.chunk.js","sourcesContent":["import React from 'react'\r\nimport {useField} from 'formik'\r\nimport s from '../Form.module.css'\r\n\r\ntype FormTextareaPropsType = {\r\n    label?: string\r\n    name: string\r\n    placeholder: string\r\n    id?: string\r\n}\r\n\r\nexport const FormTextarea: React.FC<FormTextareaPropsType> = React.memo(({label, ...props}) => {\r\n    const [field, meta] = useField(props)\r\n    return (\r\n        <div className={s.formField}>\r\n\r\n            <label htmlFor={props.id || props.name}>{label}</label>\r\n\r\n            <textarea {...field} {...props} className={meta.error ? s.errorBorder : ''}/>\r\n\r\n            {meta.touched && meta.error && <div className={s.errorMessage}>{meta.error}</div>}\r\n        </div>\r\n    )\r\n})","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"MyProfile_wrapper__cp4Sk\",\"avatarContainer\":\"MyProfile_avatarContainer__3A5Yx\",\"infoContainer\":\"MyProfile_infoContainer__UJLqM\",\"descriptionContainer\":\"MyProfile_descriptionContainer__2BtPE\",\"descriptionItem\":\"MyProfile_descriptionItem__2R3Vy\"};","import React from 'react'\r\nimport * as Yup from 'yup'\r\nimport {Form, Formik} from 'formik'\r\nimport {FormTextarea} from '../FormTextarea/FormTextarea'\r\n\r\ntype SingleTextareaFormPropsType = {\r\n    onSubmit: (text: string) => void\r\n}\r\n\r\nexport const SingleTextareaForm: React.FC<SingleTextareaFormPropsType> = React.memo(props => {\r\n    const {onSubmit} = props\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{textarea: ''}}\r\n\r\n            validationSchema={Yup.object({\r\n                textarea: Yup.string()\r\n                    .required('Required'),\r\n            })}\r\n\r\n            onSubmit={async (values, {setSubmitting, resetForm}) => {\r\n                await setSubmitting(true)\r\n                await resetForm()\r\n                await onSubmit(values.textarea)\r\n            }}>\r\n\r\n            {({isSubmitting}) => <Form>\r\n                <FormTextarea name='textarea'\r\n                              placeholder='Type your message...'/>\r\n                <button type={'submit'} disabled={isSubmitting}>Send</button>\r\n            </Form>}\r\n        </Formik>\r\n    )\r\n})","import React, {ComponentType} from 'react'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {PATH, StateType} from '../types/common-types'\r\nimport {useSelector} from 'react-redux'\r\n\r\ntype AuthRedirectPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nexport const withAuthRedirect = <T extends AuthRedirectPropsType>(Component: ComponentType<T>) => {\r\n\r\n    const AuthRedirect: React.FC<AuthRedirectPropsType & T> = props => {\r\n\r\n        const isAuth = useSelector<StateType>(state => state.auth.isAuth)\r\n        if (!isAuth) return <Redirect to={PATH.LOGIN}/>\r\n\r\n        return <Component {...props}/>\r\n    }\r\n\r\n    return AuthRedirect\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"MyPosts_wrapper__15TKy\",\"control_wrapper\":\"MyPosts_control_wrapper__2ZGHX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Profile_wrapper__2B6mU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Post_wrapper__3ZTzx\",\"avatar_container\":\"Post_avatar_container__4fRhO\",\"content_container\":\"Post_content_container__3MGXq\"};","import React from \"react\";\r\nimport s from './Post.module.css'\r\n\r\ntype PostPropsType = {\r\n    src: string\r\n    alt: string\r\n    text: string\r\n    likes: number\r\n}\r\n\r\nexport const Post: React.FC<PostPropsType> = React.memo(props => {\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <div className={s.avatar_container}>\r\n                <img src={props.src} alt={props.alt}/>\r\n            </div>\r\n\r\n            <div className={s.content_container}>\r\n                <div>{props.text}</div>\r\n                <div>Likes: {props.likes}</div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n})","import s from '../MyPosts.module.css'\r\nimport React from 'react'\r\nimport {SingleTextareaForm} from '../../../../UI/Form/SingleTextareaForm/SingleTextareaForm'\r\n\r\ntype PostControlPropsType = {\r\n    onSubmit: (text: string) => void\r\n}\r\n\r\nexport const PostsForm: React.FC<PostControlPropsType> = React.memo(props => {\r\n    const {onSubmit} = props\r\n\r\n    return (\r\n        <div className={s.control_wrapper}>\r\n            <SingleTextareaForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n})","import React, {useMemo} from 'react'\r\nimport s from './MyPosts.module.css'\r\nimport {Post} from './Post/Post'\r\nimport {v1} from 'uuid'\r\nimport {PostsForm} from './PostForm/PostForm'\r\nimport {dataForMyPostsType} from '../../../../types/profile-types'\r\n\r\ntype MyPostsPropsType = {\r\n    addPost: (text: string) => void\r\n    dataForMyPosts: dataForMyPostsType[]\r\n}\r\n\r\nexport const MyPosts: React.FC<MyPostsPropsType> = React.memo(props => {\r\n    const {addPost, dataForMyPosts} = props\r\n\r\n    const mappedPosts = useMemo(() => dataForMyPosts.map(item => <Post key={v1()}\r\n                                                                       text={item.text}\r\n                                                                       src={item.src}\r\n                                                                       alt={item.alt}\r\n                                                                       likes={item.likes}/>), [dataForMyPosts])\r\n    return (\r\n        <section className={s.wrapper}>\r\n            <PostsForm onSubmit={addPost}/>\r\n            {mappedPosts}\r\n\r\n        </section>\r\n    )\r\n})","import s from '../MyProfile.module.css'\r\nimport React, {ChangeEvent} from 'react'\r\n\r\ntype MyAvatarPropsType = {\r\n    src: string\r\n    alt: string\r\n    isOwner: boolean\r\n    updateUserAvatar: (avatarFile: File) => void\r\n}\r\n\r\nexport const MyAvatar: React.FC<MyAvatarPropsType> = React.memo(props => {\r\n    const {src, alt, isOwner, updateUserAvatar} = props\r\n\r\n    const changeAvatarHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        e.currentTarget.files && updateUserAvatar(e.currentTarget.files[0])\r\n        e.currentTarget.value = ''\r\n    }\r\n\r\n    return (\r\n        <div className={s.avatarContainer}>\r\n            <img src={src} alt={alt}/>\r\n            {isOwner && <input type='file' onChange={changeAvatarHandler}/>}\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, useCallback, useEffect, useState} from 'react'\r\n\r\ntype MyStatusPropsType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n}\r\n\r\nexport const MyStatus: React.FC<MyStatusPropsType> = React.memo(props => {\r\n    const {status, updateUserStatus, isOwner} = props\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.status)\r\n\r\n    useEffect(() => setTitle(status), [status])\r\n\r\n    const onEditMode = useCallback(() => setEditMode(true), [])\r\n\r\n    const offEditMode = useCallback(() => {\r\n        updateUserStatus(title)\r\n        setEditMode(false)\r\n    }, [title, updateUserStatus])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }, [])\r\n\r\n    const onKeyPressHandler = useCallback((e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') offEditMode()\r\n    }, [offEditMode])\r\n\r\n    return isOwner && editMode\r\n        ? <input type='text'\r\n                 onBlur={offEditMode}\r\n                 onChange={onChangeHandler}\r\n                 onKeyPress={onKeyPressHandler}\r\n                 autoFocus\r\n                 value={title}/>\r\n        : <h4 onDoubleClick={onEditMode}>{status || 'Место для статуса'}</h4>\r\n})","import React from 'react'\r\n\r\ntype MyInfoContactsPropsType = {\r\n    title: string\r\n    value: string\r\n}\r\nexport const MyContacts: React.FC<MyInfoContactsPropsType> = React.memo(props => {\r\n    const {title, value} = props\r\n\r\n    return (\r\n        <div>\r\n            <span>{title}</span>\r\n            <span>{value}</span>\r\n        </div>\r\n    )\r\n})","import React from 'react'\r\nimport s from '../../MyProfile.module.css'\r\nimport {UserProfileContactsType, UserProfileType} from '../../../../../../types/profile-types'\r\nimport {MyContacts} from './MyContacts/MyContacts'\r\n\r\ntype MyProfileDescriptionType = {\r\n    userProfile: UserProfileType\r\n    isOwner: boolean\r\n    onEditMode: () => void\r\n}\r\n\r\nexport const MyDescription: React.FC<MyProfileDescriptionType> = React.memo(props => {\r\n    const {userProfile, isOwner, onEditMode} = props\r\n    return (\r\n        <div className={s.descriptionContainer}>\r\n            <div className={s.descriptionItem}>\r\n                <strong>About me:</strong>\r\n                {userProfile.aboutMe || 'Empty'}\r\n            </div>\r\n\r\n            <div className={s.descriptionItem}>\r\n                <strong>Looking for a job:</strong>\r\n                {userProfile.lookingForAJob ? 'Yes' : 'No'}\r\n            </div>\r\n\r\n            <div className={s.descriptionItem}>\r\n                <strong>Looking for a job description:</strong>\r\n                {userProfile.lookingForAJobDescription || 'Empty'}\r\n            </div>\r\n\r\n            <div className={s.descriptionItem}>\r\n                <strong>Contacts</strong>\r\n                {Object.keys(userProfile.contacts).map(contact => <MyContacts key={contact}\r\n                                                                        title={contact}\r\n                                                                        value={userProfile.contacts[contact as keyof UserProfileContactsType]}/>)}\r\n            </div>\r\n\r\n            {isOwner && <button onClick={onEditMode}>Edit</button>}\r\n        </div>\r\n    )\r\n})","import React from 'react'\r\nimport {Form, Formik} from 'formik'\r\nimport {FormInput} from '../../../../../UI/Form/FormInput/FormInput'\r\nimport {FormCheckbox} from '../../../../../UI/Form/FormCheckbox/FormCheckbox'\r\nimport {FormTextarea} from '../../../../../UI/Form/FormTextarea/FormTextarea'\r\nimport {UserProfileType} from '../../../../../../types/profile-types'\r\nimport * as Yup from 'yup'\r\n\r\ntype MyDescriptionEditFormType = {\r\n    onSubmit: (userDescription: any) => void\r\n    userProfile: UserProfileType\r\n}\r\n\r\nexport const MyDescriptionEditForm: React.FC<MyDescriptionEditFormType> = React.memo(props => {\r\n    const {onSubmit, userProfile} = props\r\n\r\n    const URLValidation = Yup.string()\r\n        .matches(/((https?):\\/\\/)?(www.)?[a-z0-9]+(\\.[a-z]{2,}){1,3}(#?\\/?[a-zA-Z0-9#]+)*\\/?(\\?[a-zA-Z0-9-_]+=[a-zA-Z0-9-%]+&?)?$/,\r\n            'Enter correct url!')\r\n\r\n    const contactsValidation = Object\r\n        .keys(userProfile.contacts)\r\n        .reduce((acc: any, value) => (acc[value] = URLValidation, acc), {})\r\n\r\n    return <Formik\r\n        initialValues={{\r\n            fullName: userProfile.fullName,\r\n            aboutMe: userProfile.aboutMe,\r\n            lookingForAJob: userProfile.lookingForAJob,\r\n            lookingForAJobDescription: userProfile.lookingForAJobDescription,\r\n            contacts: userProfile.contacts\r\n        }}\r\n\r\n        validationSchema={Yup.object({\r\n            fullName: Yup.string()\r\n                .max(50, 'Must be 50 characters or less'),\r\n            aboutMe: Yup.string()\r\n                .max(300, 'Must be 300 characters or less'),\r\n            lookingForAJobDescription: Yup.string()\r\n                .max(300, 'Must be 300 characters or less'),\r\n            contacts: Yup.object(contactsValidation)\r\n        })}\r\n\r\n        onSubmit={async (values, {setSubmitting}) => {\r\n            await setSubmitting(true)\r\n            await onSubmit(values)\r\n        }}>\r\n\r\n        {({isSubmitting}) => <Form className={'formikFormContainer'}>\r\n            <h4>Main info</h4>\r\n\r\n            <FormInput\r\n                label='Full Name'\r\n                name='fullName'\r\n                type='text'\r\n                placeholder='Type your full name...'/>\r\n\r\n            <FormTextarea label={'About'}\r\n                          name={'aboutMe'}\r\n                          placeholder={'Say something about you...'}/>\r\n\r\n            <FormCheckbox name='lookingForAJob'>Looking For A Job</FormCheckbox>\r\n\r\n\r\n            <FormTextarea label={'Looking For A Job Description'}\r\n                          name={'lookingForAJobDescription'}\r\n                          placeholder={'lookingForAJobDescription'}/>\r\n\r\n            <h4>Contacts</h4>\r\n            {Object\r\n                .keys(userProfile.contacts)\r\n                .map(contact => <FormInput key={contact}\r\n                                           label={`${contact}`}\r\n                                           name={`contacts.${contact}`}\r\n                                           type='text'\r\n                                           placeholder={`${contact}`}/>)}\r\n\r\n            <button type='submit' disabled={isSubmitting}>Save</button>\r\n        </Form>}\r\n    </Formik>\r\n})","import s from '../MyProfile.module.css'\r\nimport React, {useState} from 'react'\r\nimport {MyStatus} from './MyStatus/MyStatus'\r\nimport {UserProfileType} from '../../../../../types/profile-types'\r\nimport {MyDescription} from './MyDescription/MyDescription'\r\nimport {MyDescriptionEditForm} from './MyDescriptionEditForm/MyDescriptionEditForm'\r\n\r\ntype MyInfoPropsType = {\r\n    userProfile: UserProfileType\r\n    userStatus: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    updateUserDescription: (userDescription: UserProfileType) => void\r\n}\r\n\r\nexport const MyInfo: React.FC<MyInfoPropsType> = React.memo(props => {\r\n    const {userProfile, userStatus, updateUserStatus, isOwner, updateUserDescription} = props\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n\r\n    const offEditMode = async (userDescription: UserProfileType) => {\r\n        await updateUserDescription(userDescription)\r\n        setEditMode(false)\r\n    }\r\n\r\n    return (\r\n        <div className={s.infoContainer}>\r\n            <h2>{userProfile.fullName}</h2>\r\n\r\n            <MyStatus status={userStatus}\r\n                      updateUserStatus={updateUserStatus}\r\n                      isOwner={isOwner}/>\r\n\r\n            {!editMode\r\n                ? <MyDescription userProfile={userProfile}\r\n                                 isOwner={isOwner}\r\n                                 onEditMode={onEditMode}/>\r\n\r\n                : <MyDescriptionEditForm onSubmit={offEditMode}\r\n                                         userProfile={userProfile}/>}\r\n        </div>\r\n    )\r\n})","import React from 'react'\r\nimport s from './MyProfile.module.css'\r\nimport {MyAvatar} from './MyAvatar/MyAvatar'\r\nimport {MyInfo} from './MyInfo/MyInfo'\r\nimport {UserProfileType} from '../../../../types/profile-types'\r\n\r\ntype MyProfilePropsType = {\r\n    userProfile: UserProfileType\r\n    userStatus: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    updateUserAvatar: (avatarFile: File) => void\r\n    updateUserDescription: (userDescription: UserProfileType) => void\r\n}\r\n\r\nexport const MyProfile: React.FC<MyProfilePropsType> = React.memo(props => {\r\n    const {userProfile, userStatus, updateUserStatus, isOwner, updateUserAvatar, updateUserDescription} = props\r\n\r\n    const avatarSRC = userProfile.photos.large || 'https://pbs.twimg.com/profile_images/1368235617243426820/L0m5gTDB.jpg'\r\n\r\n    return (\r\n        <section className={s.wrapper}>\r\n            <MyAvatar\r\n                src={avatarSRC}\r\n                alt={userProfile.fullName}\r\n                isOwner={isOwner}\r\n                updateUserAvatar={updateUserAvatar}/>\r\n\r\n            <MyInfo userProfile={userProfile}\r\n                    userStatus={userStatus}\r\n                    updateUserStatus={updateUserStatus}\r\n                    isOwner={isOwner}\r\n                    updateUserDescription={updateUserDescription}/>\r\n        </section>\r\n    )\r\n})","import React from 'react'\r\nimport s from './Profile.module.css'\r\nimport {MyPosts} from './MyPosts/MyPosts'\r\nimport {MyProfile} from './MyProfile/MyProfile'\r\nimport {dataForMyPostsType, UserProfileType} from '../../../types/profile-types'\r\n\r\ntype ProfilePropsType = {\r\n    dataForMyPosts: dataForMyPostsType[]\r\n    userProfile: UserProfileType | null\r\n    userStatus: string\r\n    addPost: (text: string) => void\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    updateUserAvatar: (avatarFile: File) => void\r\n    updateUserDescription: (userDescription: UserProfileType) => void\r\n}\r\n\r\nexport const Profile: React.FC<ProfilePropsType> = React.memo(props => {\r\n    const {\r\n        dataForMyPosts,\r\n        userProfile,\r\n        userStatus,\r\n        addPost,\r\n        updateUserStatus,\r\n        isOwner,\r\n        updateUserAvatar,\r\n        updateUserDescription\r\n    } = props\r\n\r\n    return (\r\n        <main className={s.wrapper}>\r\n            {userProfile && <MyProfile userProfile={userProfile}\r\n                                       userStatus={userStatus}\r\n                                       updateUserStatus={updateUserStatus}\r\n                                       isOwner={isOwner}\r\n                                       updateUserAvatar={updateUserAvatar}\r\n                                       updateUserDescription={updateUserDescription}/>}\r\n\r\n            {isOwner && <MyPosts dataForMyPosts={dataForMyPosts}\r\n                                 addPost={addPost}/>}\r\n        </main>\r\n    )\r\n})","import React, {ComponentType, useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {Profile} from './Profile'\r\nimport {StateType} from '../../../types/common-types'\r\nimport {\r\n    addPost,\r\n    getUserProfile,\r\n    getUserStatus, updateUserAvatar, updateUserDescription,\r\n    updateUserStatus\r\n} from '../../../redux/actions/profile-actions'\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom'\r\nimport {ProfileType, UserProfileType} from '../../../types/profile-types'\r\nimport {compose} from 'redux'\r\nimport {withAuthRedirect} from '../../../hoc/withAuthRedirect'\r\nimport {AuthType} from '../../../types/auth-types'\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\nconst ProfileContainer: React.FC<RouteComponentProps<PathParamsType>> = React.memo(props => {\r\n    const {match} = props\r\n\r\n    const dispatch = useDispatch()\r\n    const {dataForMyPosts, userProfile, userStatus} = useSelector<StateType, ProfileType>(state => state.profile)\r\n    const {id} = useSelector<StateType, AuthType>(state => state.auth)\r\n\r\n    const addPostHandler = useCallback((text: string) => dispatch(addPost(text)), [dispatch])\r\n    const updateUserStatusHandler = useCallback((status: string) => dispatch(updateUserStatus(status)), [dispatch])\r\n    const updateUserAvatarHandler = useCallback((avatarFile: File) => dispatch(updateUserAvatar(avatarFile)), [dispatch])\r\n    const updateUserDescriptionHandler = useCallback((userDescription: UserProfileType) => dispatch(updateUserDescription(userDescription)), [dispatch])\r\n\r\n    useEffect(() => {\r\n        let userID = Number(match.params.userId) || id\r\n        dispatch(getUserProfile(userID))\r\n        dispatch(getUserStatus(userID))\r\n    }, [dispatch, match.params.userId, id])\r\n\r\n    const isOwner = !match.params.userId || (id !== null && id === Number(match.params.userId))\r\n\r\n    return <Profile dataForMyPosts={dataForMyPosts}\r\n                    userProfile={userProfile}\r\n                    userStatus={userStatus}\r\n                    updateUserStatus={updateUserStatusHandler}\r\n                    addPost={addPostHandler}\r\n                    isOwner={isOwner}\r\n                    updateUserAvatar={updateUserAvatarHandler}\r\n                    updateUserDescription={updateUserDescriptionHandler}/>\r\n})\r\n\r\nexport default compose<ComponentType>(withAuthRedirect, withRouter)(ProfileContainer)"],"sourceRoot":""}