{"version":3,"sources":["components/UI/Loader/Loader.tsx","redux/reducers/dialogs-reducer.ts","components/UI/Form/FormCheckbox/FormCheckbox.tsx","redux/reducers/users-reducer.ts","api/users-api.ts","api/follow-api.ts","redux/reducers/profile-reducer.ts","api/profile-api.ts","components/Content/Login/Login.module.css","routes/routes.ts","api/axios-instance.ts","redux/reducers/auth-reducer.ts","api/security-api.ts","api/auth-api.ts","redux/reducers/app-reducer.ts","redux/reducers/sidebar-reducer.ts","redux/store.ts","components/Content/Login/LoginForm/LoginForm.tsx","components/Content/Login/Login.tsx","components/Content/Login/LoginContainer.tsx","components/Content/Sidebar/Sidebar.tsx","components/Content/Sidebar/SidebarContainer.tsx","components/Content/ErrorPage/Error404.tsx","components/Content/Header/LogoIcon.tsx","components/Content/Header/Header.tsx","components/UI/ScrollTop/ScrollTop.tsx","App.tsx","components/UI/MUI/theme.ts","index.tsx","types/api-types.ts","components/UI/Form/Form.module.css","components/Content/ErrorPage/Error404.module.css","components/UI/Form/FormInput/FormInput.tsx"],"names":["Loader","React","memo","sx","color","zIndex","theme","drawer","open","DIALOGS_ACTIONS_TYPES","initialState","messages","dialogsReducer","state","action","type","SET_MESSAGES","payload","map","message","messageID","v1","filter","index","array","length","setMessages","FormCheckbox","label","props","useField","field","meta","className","s","formFieldCheckbox","control","touched","error","errorMessage","USERS_ACTIONS_TYPES","usersAPI","page","pageSize","term","followers","axiosInstance","get","then","response","data","followAPI","id","post","delete","usersData","totalUsersCount","currentPage","isLoading","followLoader","search","usersReducer","FOLLOW","user","followed","SET_USERS","users","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","total","TOGGLE_LOADER","status","TOGGLE_FOLLOW_LOADER","u","SET_SEARCH_PARAMS","follow","setUsers","setCurrentPage","setTotalUsersCount","toggleLoader","toggleFollowLoader","setSearchParams","requestUsers","dispatch","a","items","totalCount","alert","changeCurrentPage","followUser","PROFILE_ACTIONS_TYPES","profileAPI","put","avatarFile","formData","FormData","append","description","userProfile","userStatus","profileReducer","SET_USER_PROFILE","SET_USER_STATUS","SET_USER_AVATAR","photos","userAvatar","setUserStatus","getUserProfile","getUserStatus","updateUserStatus","resultCode","ResultCodes","Success","updateUserAvatar","updateUserDescription","userDescription","getState","auth","module","exports","PATH","axios","create","baseURL","withCredentials","headers","AUTH_ACTIONS_TYPES","securityAPI","url","authAPI","email","password","rememberMe","captcha","APP_ACTIONS_TYPES","login","isAuth","captchaURL","setAuthUserData","SET_USER_DATA","checkAuth","getCaptchaURL","SET_CAPTCHA","isInitialized","setAppInitialized","SET_APP_INITIALIZED","dataForSidebar","name","link","PROFILE","DIALOGS","USERS","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","profile","dialogs","sidebar","LOGOUT","app","store","createStore","applyMiddleware","thunk","LoginForm","onSubmit","initialValues","validationSchema","Yup","required","max","values","resetForm","setStatus","FormInput","style","fontSize","fontWeight","src","alt","Button","variant","Login","fromWrapper","LoginContainer","useDispatch","useSelector","loginOnSite","useCallback","ResultCodeForCaptcha","Captcha","to","Sidebar","aria-label","List","padding","item","ListItem","disablePadding","component","Link","textDecoration","ListItemButton","ListItemText","primary","SidebarContainer","Error404","errorPageWrapper","error404","errorImg","pageNotFound","LogoIcon","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","cx","cy","r","x1","y1","x2","y2","Header","logoutHandler","AppBar","position","Toolbar","IconButton","href","ROOT","size","edge","mr","Typography","flexGrow","Box","display","alignItems","gap","Avatar","onClick","ml","LOGIN","ScrollTop","children","trigger","useScrollTrigger","disableHysteresis","threshold","Zoom","in","event","anchor","target","ownerDocument","document","querySelector","scrollIntoView","behavior","block","role","bottom","right","ProfileContainer","lazy","DialogsContainer","UsersContainer","App","useEffect","CssBaseline","Container","maxWidth","marginTop","marginBottom","Grid","container","spacing","xs","fallback","path","exact","PROFILE_WITH_ID","ERROR","Fab","defaultTheme","createTheme","palette","mode","main","ReactDOM","render","StrictMode","ThemeProvider","getElementById","formField"],"mappings":"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","file":"static/js/main.7ed089d0.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Backdrop, CircularProgress} from '@mui/material'\r\n\r\nexport const Loader: React.FC = React.memo(() => {\r\n    return (\r\n        <Backdrop sx={{color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1}} open>\r\n            <CircularProgress color='inherit'/>\r\n        </Backdrop>\r\n    )\r\n})","import {ChatMessageType, DialogsType} from '../../types/dialogs-types'\r\nimport {v1} from 'uuid'\r\n\r\nexport enum DIALOGS_ACTIONS_TYPES {\r\n    SET_MESSAGES = 'SET_MESSAGES',\r\n}\r\n\r\nexport type DialogsActionsType = ReturnType<typeof setMessages>\r\n\r\nconst initialState: DialogsType = {\r\n    messages: []\r\n}\r\n\r\nexport const dialogsReducer = (state = initialState, action: DialogsActionsType): DialogsType => {\r\n    switch (action.type) {\r\n        case DIALOGS_ACTIONS_TYPES.SET_MESSAGES:\r\n            return {\r\n                ...state,\r\n                messages: [\r\n                    ...state.messages,\r\n                    ...action.payload.messages\r\n                        .map(message => ({...message, messageID: v1()}))\r\n                        .filter((message, index, array) => index >= array.length - 25)\r\n                ]\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setMessages = (messages: ChatMessageType[]) => ({\r\n    type: DIALOGS_ACTIONS_TYPES.SET_MESSAGES,\r\n    payload: {messages}\r\n} as const)","import React from 'react'\r\nimport {useField} from 'formik'\r\nimport s from '../Form.module.css'\r\nimport {Checkbox, FormControlLabel} from '@mui/material'\r\n\r\ntype FormCheckboxPropsType = {\r\n    name: string\r\n    label?: string\r\n}\r\n\r\nexport const FormCheckbox: React.FC<FormCheckboxPropsType> = React.memo(({label, ...props}) => {\r\n    const [field, meta] = useField({...props, type: 'checkbox'})\r\n\r\n    return (\r\n        <div className={s.formFieldCheckbox}>\r\n            <FormControlLabel control={<Checkbox {...field} {...props}/>} label={label}/>\r\n            {meta.touched && meta.error && <div className={s.errorMessage}>{meta.error}</div>}\r\n        </div>\r\n    )\r\n})","import {UsersType, UserType} from '../../types/users-types'\r\nimport {ThunkType} from '../store'\r\nimport {usersAPI} from '../../api/users-api'\r\nimport {followAPI} from '../../api/follow-api'\r\n\r\nenum USERS_ACTIONS_TYPES {\r\n    FOLLOW = 'FOLLOW',\r\n    SET_USERS = 'SET_USERS',\r\n    SET_CURRENT_PAGE = 'SET_CURRENT_PAGE',\r\n    SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT',\r\n    TOGGLE_LOADER = 'TOGGLE_LOADER',\r\n    TOGGLE_FOLLOW_LOADER = 'TOGGLE_FOLLOW_LOADER',\r\n    SET_SEARCH_PARAMS = 'SET_SEARCH_PARAMS'\r\n}\r\n\r\nexport type UsersActionsType =\r\n    | ReturnType<typeof follow>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof toggleLoader>\r\n    | ReturnType<typeof toggleFollowLoader>\r\n    | ReturnType<typeof setSearchParams>\r\n\r\nconst initialState: UsersType = {\r\n    usersData: [],\r\n    pageSize: 25,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isLoading: false,\r\n    followLoader: [],\r\n    search: {\r\n        term: '',\r\n        followers: null\r\n    }\r\n}\r\n\r\nexport const usersReducer = (state = initialState, action: UsersActionsType): UsersType => {\r\n    switch (action.type) {\r\n        case USERS_ACTIONS_TYPES.FOLLOW:\r\n            return {\r\n                ...state,\r\n                usersData: state.usersData.map((user) => user.id === action.payload.id\r\n                    ? {...user, followed: !user.followed}\r\n                    : user),\r\n            }\r\n\r\n        case USERS_ACTIONS_TYPES.SET_USERS:\r\n            return {...state, usersData: [...action.payload.users]}\r\n\r\n        case USERS_ACTIONS_TYPES.SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.payload.page}\r\n\r\n        case USERS_ACTIONS_TYPES.SET_TOTAL_USERS_COUNT:\r\n            return {...state, totalUsersCount: action.payload.total}\r\n\r\n        case USERS_ACTIONS_TYPES.TOGGLE_LOADER:\r\n            return {...state, isLoading: action.payload.status}\r\n\r\n        case USERS_ACTIONS_TYPES.TOGGLE_FOLLOW_LOADER:\r\n            return {\r\n                ...state,\r\n                followLoader: action.payload.status\r\n                    ? [...state.followLoader, action.payload.id]\r\n                    : state.followLoader.filter(u => u !== action.payload.id)\r\n            }\r\n\r\n        case USERS_ACTIONS_TYPES.SET_SEARCH_PARAMS:\r\n            return {\r\n                ...state,\r\n                search: {...action.payload}\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const follow = (id: number) => ({\r\n    type: USERS_ACTIONS_TYPES.FOLLOW,\r\n    payload: {id}\r\n} as const)\r\n\r\nexport const setUsers = (users: UserType[]) => ({\r\n    type: USERS_ACTIONS_TYPES.SET_USERS,\r\n    payload: {users}\r\n} as const)\r\n\r\nexport const setCurrentPage = (page: number) => ({\r\n    type: USERS_ACTIONS_TYPES.SET_CURRENT_PAGE,\r\n    payload: {page}\r\n} as const)\r\n\r\nexport const setTotalUsersCount = (total: number) => ({\r\n    type: USERS_ACTIONS_TYPES.SET_TOTAL_USERS_COUNT,\r\n    payload: {total}\r\n} as const)\r\n\r\nexport const toggleLoader = (status: boolean) => ({\r\n    type: USERS_ACTIONS_TYPES.TOGGLE_LOADER,\r\n    payload: {status}\r\n} as const)\r\n\r\nexport const toggleFollowLoader = (status: boolean, id: number) => ({\r\n    type: USERS_ACTIONS_TYPES.TOGGLE_FOLLOW_LOADER,\r\n    payload: {status, id}\r\n} as const)\r\n\r\nexport const setSearchParams = (term: string, followers: boolean | null) => ({\r\n    type: USERS_ACTIONS_TYPES.SET_SEARCH_PARAMS,\r\n    payload: {term, followers}\r\n} as const)\r\n\r\nexport const requestUsers = (page: number, pageSize: number, term: string = '', followers: boolean | null = null): ThunkType => async dispatch => {\r\n    try {\r\n        dispatch(toggleLoader(true))\r\n        const response = await usersAPI.requestUsers(page, pageSize, term, followers)\r\n        dispatch(setUsers(response.items))\r\n        dispatch(setTotalUsersCount(response.totalCount))\r\n        dispatch(setCurrentPage(page))\r\n        dispatch(setSearchParams(term, followers))\r\n        dispatch(toggleLoader(false))\r\n    } catch (e) {\r\n        alert(e)\r\n    }\r\n}\r\n\r\nexport const changeCurrentPage = (page: number, pageSize: number, term: string, followers: boolean | null): ThunkType => async dispatch => {\r\n    dispatch(setCurrentPage(page))\r\n    dispatch(requestUsers(page, pageSize, term, followers))\r\n}\r\n\r\nexport const followUser = (id: number, followed: boolean): ThunkType => async dispatch => {\r\n    dispatch(toggleFollowLoader(true, id))\r\n\r\n    if (!followed) {\r\n        await followAPI.follow(id)\r\n        dispatch(follow(id))\r\n        dispatch(toggleFollowLoader(false, id))\r\n    }\r\n\r\n    if (followed) {\r\n        await followAPI.unfollow(id)\r\n        dispatch(follow(id))\r\n        dispatch(toggleFollowLoader(false, id))\r\n    }\r\n}","import {axiosInstance} from './axios-instance'\r\nimport {UserType} from '../types/users-types'\r\n\r\ntype UsersResponseType = {\r\n    totalCount: number\r\n    error: string\r\n    items: UserType[]\r\n}\r\n\r\nexport const usersAPI = {\r\n    requestUsers: (page: number, pageSize: number, term: string, followers: boolean | null) => axiosInstance\r\n        .get<UsersResponseType>(`users?count=${pageSize}&page=${page}&term=${term}` + (followers === null ? '' : `&friend=${followers}`))\r\n        .then(response => response.data)\r\n}","import {axiosInstance} from './axios-instance'\r\nimport {ServerResponse} from '../types/api-types'\r\n\r\nexport const followAPI = {\r\n    follow: (id: number) => axiosInstance\r\n        .post<ServerResponse>(`follow/${id}`)\r\n        .then(response => response.data),\r\n\r\n    unfollow: (id: number) => axiosInstance\r\n        .delete<ServerResponse>(`follow/${id}`)\r\n        .then(response => response.data)\r\n}","import {ProfileType, UserProfilePhotosType, UserProfileType} from '../../types/profile-types'\r\nimport {ThunkType} from '../store'\r\nimport {profileAPI} from '../../api/profile-api'\r\nimport {ResultCodes} from '../../types/api-types'\r\n\r\nenum PROFILE_ACTIONS_TYPES {\r\n    SET_USER_PROFILE = 'SET_USER_PROFILE',\r\n    SET_USER_STATUS = 'SET_USER_STATUS',\r\n    SET_USER_AVATAR = 'SET_USER_AVATAR',\r\n}\r\n\r\nexport type ProfileActionsType =\r\n    | ReturnType<typeof setUserProfile>\r\n    | ReturnType<typeof setUserStatus>\r\n    | ReturnType<typeof setUserAvatar>\r\n\r\nconst initialState: ProfileType = {\r\n    userProfile: null,\r\n    userStatus: '',\r\n}\r\n\r\nexport const profileReducer = (state = initialState, action: ProfileActionsType): ProfileType => {\r\n    switch (action.type) {\r\n        case PROFILE_ACTIONS_TYPES.SET_USER_PROFILE:\r\n            return {...state, userProfile: action.payload.userProfile,}\r\n\r\n        case PROFILE_ACTIONS_TYPES.SET_USER_STATUS:\r\n            return {...state, userStatus: action.payload.userStatus}\r\n\r\n        case PROFILE_ACTIONS_TYPES.SET_USER_AVATAR:\r\n            return {...state, userProfile: {...state.userProfile, photos: action.payload.userAvatar}} as ProfileType\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setUserProfile = (userProfile: UserProfileType) => ({\r\n    type: PROFILE_ACTIONS_TYPES.SET_USER_PROFILE,\r\n    payload: {userProfile}\r\n} as const)\r\n\r\nexport const setUserStatus = (userStatus: string) => ({\r\n    type: PROFILE_ACTIONS_TYPES.SET_USER_STATUS,\r\n    payload: {userStatus}\r\n} as const)\r\n\r\nexport const setUserAvatar = (userAvatar: UserProfilePhotosType) => ({\r\n    type: PROFILE_ACTIONS_TYPES.SET_USER_AVATAR,\r\n    payload: {userAvatar}\r\n} as const)\r\n\r\nexport const getUserProfile = (id: number | null): ThunkType => async dispatch => {\r\n    const response = await profileAPI.getUserProfile(id)\r\n    dispatch(setUserProfile(response))\r\n}\r\n\r\nexport const getUserStatus = (id: number | null): ThunkType => async dispatch => {\r\n    const response = await profileAPI.getUserStatus(id)\r\n    dispatch(setUserStatus(response))\r\n}\r\n\r\nexport const updateUserStatus = (userStatus: string): ThunkType => async dispatch => {\r\n    const response = await profileAPI.updateUserStatus(userStatus)\r\n    response.resultCode === ResultCodes.Success && dispatch(setUserStatus(userStatus))\r\n}\r\n\r\nexport const updateUserAvatar = (avatarFile: File): ThunkType => async dispatch => {\r\n    const response = await profileAPI.updateUserAvatar(avatarFile)\r\n    response.resultCode === ResultCodes.Success && dispatch(setUserAvatar(response.data.photos)) && alert('Успешно!')\r\n    response.resultCode !== ResultCodes.Success && alert(response.messages)\r\n}\r\n\r\nexport const updateUserDescription = (userDescription: UserProfileType): ThunkType =>\r\n    async (dispatch, getState) => {\r\n        const response = await profileAPI.updateUserDescription(userDescription)\r\n        if (response.resultCode === ResultCodes.Success) {\r\n            const id = getState().auth.id\r\n            await dispatch(getUserProfile(id))\r\n        }\r\n    }","import {axiosInstance} from './axios-instance'\r\nimport {UserProfilePhotosType, UserProfileType} from '../types/profile-types'\r\nimport {ServerResponse} from '../types/api-types'\r\n\r\nexport const profileAPI = {\r\n    getUserProfile: (id: number | null) => axiosInstance\r\n        .get<UserProfileType>(`profile/${id}`)\r\n        .then(response => response.data),\r\n\r\n    getUserStatus: (id: number | null) => axiosInstance\r\n        .get<string>(`profile/status/${id}`)\r\n        .then(response => response.data),\r\n\r\n    updateUserStatus: (status: string) => axiosInstance\r\n        .put<ServerResponse>(`profile/status`, {status})\r\n        .then(response => response.data),\r\n\r\n    updateUserAvatar: (avatarFile: File) => {\r\n        const formData = new FormData()\r\n        formData.append('image', avatarFile)\r\n\r\n        return axiosInstance\r\n            .put<ServerResponse<{ photos: UserProfilePhotosType }>>(`profile/photo`, formData)\r\n            .then(response => response.data)\r\n    },\r\n\r\n    updateUserDescription: (description: UserProfileType) => axiosInstance\r\n        .put<ServerResponse>(`profile`, description)\r\n        .then(response => response.data)\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fromWrapper\":\"Login_fromWrapper__37Hne\"};","export enum PATH {\r\n    ROOT = '/',\r\n    PROFILE = '/profile',\r\n    PROFILE_WITH_ID = '/profile/:userId?',\r\n    DIALOGS = '/dialogs',\r\n    USERS = '/users',\r\n    LOGIN = '/login',\r\n    ERROR = ''\r\n}","import axios from 'axios'\r\n\r\nexport const axiosInstance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {'API-KEY': '6f228861-1f0c-43fb-a420-fcf28121de49'},\r\n})","import {AuthType} from '../../types/auth-types'\r\nimport {ThunkType} from '../store'\r\nimport {securityAPI} from '../../api/security-api'\r\nimport {authAPI} from '../../api/auth-api'\r\nimport {ResultCodeForCaptcha, ResultCodes} from '../../types/api-types'\r\n\r\nenum AUTH_ACTIONS_TYPES {\r\n    SET_USER_DATA = 'AUTH/SET_USER_DATA',\r\n    LOGOUT = 'AUTH/LOGOUT',\r\n    SET_CAPTCHA = 'AUTH/SET_CAPTCHA'\r\n}\r\n\r\nexport type AuthActionsType =\r\n    | ReturnType<typeof setAuthUserData>\r\n    | ReturnType<typeof changeAuthWhenLogout>\r\n    | ReturnType<typeof setCaptcha>\r\n\r\nconst initialState: AuthType = {\r\n    id: null,\r\n    login: null,\r\n    email: null,\r\n    isAuth: false,\r\n    captchaURL: ''\r\n}\r\n\r\nexport const authReducer = (state = initialState, action: AuthActionsType): AuthType => {\r\n    switch (action.type) {\r\n        case AUTH_ACTIONS_TYPES.SET_USER_DATA:\r\n            return {...state, ...action.payload, isAuth: true}\r\n\r\n        case AUTH_ACTIONS_TYPES.LOGOUT:\r\n            return {...state, isAuth: false}\r\n\r\n        case AUTH_ACTIONS_TYPES.SET_CAPTCHA:\r\n            return {...state, captchaURL: action.payload.captcha}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (id: number, login: string, email: string) => ({\r\n    type: AUTH_ACTIONS_TYPES.SET_USER_DATA,\r\n    payload: {id, login, email}\r\n} as const)\r\n\r\nexport const changeAuthWhenLogout = () => ({\r\n    type: AUTH_ACTIONS_TYPES.LOGOUT\r\n} as const)\r\n\r\nexport const setCaptcha = (captcha: string) => ({\r\n    type: AUTH_ACTIONS_TYPES.SET_CAPTCHA,\r\n    payload: {captcha}\r\n} as const)\r\n\r\nexport const checkAuth = (): ThunkType => async dispatch => {\r\n    const response = await authAPI.checkAuth()\r\n    const {id, login, email} = response.data\r\n    response.resultCode === ResultCodes.Success && dispatch(setAuthUserData(id, login, email))\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, setStatus: (status: string[]) => void, captcha: string): ThunkType => async dispatch => {\r\n    const response = await authAPI.login(email, password, rememberMe, captcha)\r\n    if (response.resultCode === ResultCodes.Success) {\r\n        await dispatch(checkAuth())\r\n    } else if (response.resultCode === ResultCodeForCaptcha.Captcha) {\r\n        setStatus(response.messages)\r\n        await dispatch(getCaptchaURL())\r\n    } else {\r\n        setStatus(response.messages)\r\n    }\r\n}\r\n\r\nexport const logout = (): ThunkType => async dispatch => {\r\n    try {\r\n        await authAPI.logout()\r\n        dispatch(changeAuthWhenLogout())\r\n    } catch (e) {\r\n        alert(e)\r\n    }\r\n}\r\n\r\nexport const getCaptchaURL = (): ThunkType => async dispatch => {\r\n    const response = await securityAPI.getCaptchaURL()\r\n    dispatch(setCaptcha(response))\r\n}","import {axiosInstance} from './axios-instance'\r\n\r\nexport const securityAPI = {\r\n    getCaptchaURL: () => axiosInstance\r\n        .get<{ url: string }>('security/get-captcha-url')\r\n        .then(response => response.data.url)\r\n}","import {axiosInstance} from './axios-instance'\r\nimport {ServerResponse, ResultCodeForCaptcha, ResultCodes} from '../types/api-types'\r\n\r\ntype CheckAuthDataResponseType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\ntype LoginDataResponseType = {\r\n    userId: number\r\n}\r\n\r\nexport const authAPI = {\r\n    checkAuth: () => axiosInstance\r\n        .get<ServerResponse<CheckAuthDataResponseType>>('auth/me')\r\n        .then(response => response.data),\r\n\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => axiosInstance\r\n        .post<ServerResponse<LoginDataResponseType, ResultCodes & ResultCodeForCaptcha>>('auth/login', {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        })\r\n        .then(response => response.data),\r\n\r\n    logout: () => axiosInstance\r\n        .delete<ServerResponse>('auth/login')\r\n        .then(response => response.data)\r\n}","import {ThunkType} from '../store'\r\nimport {checkAuth} from './auth-reducer'\r\n\r\nenum APP_ACTIONS_TYPES {\r\n    SET_APP_INITIALIZED = 'APP/SET_APP_INITIALIZED'\r\n}\r\n\r\nexport type AppActionsType = ReturnType<typeof setAppInitialized>\r\n\r\nconst initialState = {\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state = initialState, action: AppActionsType): typeof initialState => {\r\n    switch (action.type) {\r\n        case APP_ACTIONS_TYPES.SET_APP_INITIALIZED:\r\n            return {...state, isInitialized: action.payload.status}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppInitialized = (status: boolean) => ({\r\n    type: APP_ACTIONS_TYPES.SET_APP_INITIALIZED, payload: {status}\r\n} as const)\r\n\r\nexport const initialization = (): ThunkType => async dispatch => {\r\n    dispatch(setAppInitialized(false))\r\n    await dispatch(checkAuth())\r\n    dispatch(setAppInitialized(true))\r\n}","import {SidebarType} from '../../types/sidebar-types'\r\nimport {PATH} from '../../routes/routes'\r\nimport {ActionsType} from '../store'\r\n\r\nconst initialState: SidebarType = {\r\n    dataForSidebar: [\r\n        {name: 'Profile', link: PATH.PROFILE},\r\n        {name: 'Dialogs', link: PATH.DIALOGS},\r\n        {name: 'Users', link: PATH.USERS}\r\n    ]\r\n}\r\n\r\nexport const sidebarReducer = (state = initialState, action: ActionsType): SidebarType => {\r\n    return state\r\n}\r\n","import {applyMiddleware, combineReducers, compose, createStore} from 'redux'\r\nimport thunk, {ThunkAction} from 'redux-thunk'\r\nimport {AppActionsType, appReducer} from './reducers/app-reducer'\r\nimport {ProfileActionsType, profileReducer} from './reducers/profile-reducer'\r\nimport {DialogsActionsType, dialogsReducer} from './reducers/dialogs-reducer'\r\nimport {sidebarReducer} from './reducers/sidebar-reducer'\r\nimport {UsersActionsType, usersReducer} from './reducers/users-reducer'\r\nimport {AuthActionsType, authReducer} from './reducers/auth-reducer'\r\n\r\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nexport const rootReducer = combineReducers(\r\n    {\r\n        profile: profileReducer,\r\n        dialogs: dialogsReducer,\r\n        sidebar: sidebarReducer,\r\n        users: usersReducer,\r\n        auth: authReducer,\r\n        app: appReducer\r\n    }\r\n)\r\n\r\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)))\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\nexport type AppDispatch = typeof store.dispatch\r\nexport type ThunkType<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>\r\n\r\nexport type ActionsType =\r\n    | UsersActionsType\r\n    | ProfileActionsType\r\n    | DialogsActionsType\r\n    | AuthActionsType\r\n    | AppActionsType\r\n\r\n","import React from 'react'\r\nimport {Form, Formik} from 'formik'\r\nimport * as Yup from 'yup'\r\nimport {FormInput} from '../../../UI/Form/FormInput/FormInput'\r\nimport {FormCheckbox} from '../../../UI/Form/FormCheckbox/FormCheckbox'\r\nimport {Button} from '@mui/material'\r\n\r\ntype LoginFormPropsType = {\r\n    onSubmit: (email: string, password: string, rememberMe: boolean,\r\n               setStatus: (status: string[]) => void, captcha: string) => void\r\n    captchaURL: string\r\n}\r\n\r\nexport const LoginForm: React.FC<LoginFormPropsType> = React.memo(props => {\r\n    const {onSubmit, captchaURL} = props\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                email: '',\r\n                password: '',\r\n                rememberMe: false,\r\n                captcha: ''\r\n            }}\r\n\r\n            validationSchema={Yup.object({\r\n                email: Yup.string()\r\n                    .email('Invalid email address')\r\n                    .required('Required'),\r\n                password: Yup.string()\r\n                    .max(20, 'Must be 20 characters or less')\r\n                    .required('Required'),\r\n                /*captcha: Yup.string()\r\n                    .required('Required'),*/\r\n            })}\r\n\r\n            onSubmit={(values, {resetForm, setStatus}) => {\r\n                // resetForm()\r\n                onSubmit(values.email, values.password, values.rememberMe, setStatus, values.captcha)\r\n            }}>\r\n\r\n            {({status}) => <Form className={'formikFormContainer'}>\r\n                <FormInput label='Email' name='email' type={'email'}/>\r\n\r\n                <FormInput label='Password' name='password' type='password'/>\r\n\r\n                <FormCheckbox name='rememberMe' label={'Remember me'}/>\r\n\r\n                <span style={{fontSize: 24, fontWeight: 'bold'}}>{status}</span>\r\n\r\n                {captchaURL &&\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<img src={captchaURL} alt={captchaURL}/>\r\n\t\t\t\t\t<FormInput label='Captcha' name='captcha' type='text'/>\r\n\t\t\t\t</div>}\r\n\r\n                <Button type='submit' variant={'contained'}>Submit</Button>\r\n            </Form>}\r\n        </Formik>\r\n    )\r\n})","import React from 'react'\r\nimport s from './Login.module.css'\r\nimport {LoginForm} from './LoginForm/LoginForm'\r\n\r\ntype LoginPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean,\r\n            setStatus: (status: string[]) => void, captcha: string) => void\r\n    captchaURL: string\r\n}\r\n\r\nexport const Login: React.FC<LoginPropsType> = React.memo(props => {\r\n    const {login, captchaURL} = props\r\n\r\n    return (\r\n        <div className={s.fromWrapper}>\r\n            <h1>Login page</h1>\r\n            <LoginForm onSubmit={login} captchaURL={captchaURL}/>\r\n        </div>\r\n    )\r\n})","import React, {useCallback} from 'react'\r\nimport {Login} from './Login'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AuthType} from '../../../types/auth-types'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {PATH} from '../../../routes/routes'\r\nimport {RootState} from '../../../redux/store'\r\nimport {login} from '../../../redux/reducers/auth-reducer'\r\n\r\nexport const LoginContainer: React.FC = React.memo(() => {\r\n    const dispatch = useDispatch()\r\n    const {isAuth, captchaURL} = useSelector<RootState, AuthType>(state => state.auth)\r\n\r\n    const loginOnSite = useCallback((email: string, password: string, rememberMe: boolean,\r\n                                     setStatus: (status: string[]) => void, captcha: string) => {\r\n        dispatch(login(email, password, rememberMe, setStatus, captcha))\r\n    }, [dispatch])\r\n\r\n    return !isAuth\r\n        ? <Login login={loginOnSite} captchaURL={captchaURL}/>\r\n        : <Redirect to={PATH.PROFILE}/>\r\n})","import React from 'react'\r\nimport {dataForSidebarType} from '../../../types/sidebar-types'\r\nimport {Link} from 'react-router-dom'\r\nimport {List, ListItem, ListItemButton, ListItemText} from '@mui/material'\r\n\r\ntype SidebarPropsType = {\r\n    dataForSidebar: dataForSidebarType[]\r\n}\r\n\r\n// TODO: Need to fix active Link\r\nexport const Sidebar: React.FC<SidebarPropsType> = React.memo(props => {\r\n    const {dataForSidebar} = props\r\n\r\n    return (\r\n        <aside>\r\n            <nav aria-label='mainSidebar'>\r\n                <List style={{padding: 0}}>\r\n                    {dataForSidebar.map(item =>\r\n                        <ListItem disablePadding key={item.name} component={Link} to={item.link}\r\n                                  style={{textDecoration: 'none', color: 'unset'}}>\r\n                            <ListItemButton>\r\n                                <ListItemText primary={item.name}/>\r\n                            </ListItemButton>\r\n                        </ListItem>)}\r\n                </List>\r\n            </nav>\r\n        </aside>\r\n    )\r\n})","import React from 'react'\r\nimport {useSelector} from 'react-redux'\r\nimport {Sidebar} from './Sidebar'\r\nimport {SidebarType} from '../../../types/sidebar-types'\r\nimport {RootState} from '../../../redux/store'\r\n\r\nexport const SidebarContainer: React.FC = React.memo(() => {\r\n    const {dataForSidebar} = useSelector<RootState, SidebarType>(state => state.sidebar)\r\n\r\n    return <Sidebar dataForSidebar={dataForSidebar}/>\r\n})","import React from 'react'\r\nimport s from './Error404.module.css'\r\n\r\nexport const Error404: React.FC = React.memo(() => {\r\n    return (\r\n        <div className={s.errorPageWrapper}>\r\n            <div className={s.error404}>404</div>\r\n            <img\r\n                src='https://cdn.statically.io/img/i.pinimg.com/originals/ef/0b/58/ef0b58bc4be3f9622c10a73fe685c57d.jpg'\r\n                alt=''\r\n                className={s.errorImg}/>\r\n\r\n            <div className={s.pageNotFound}>\r\n                Page not found!\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React from 'react'\r\n\r\nexport const LogoIcon = () => {\r\n    return (\r\n        <svg xmlns='http://www.w3.org/2000/svg' width='32' height='32' viewBox='0 0 24 24' fill='none'\r\n             stroke='currentColor' strokeWidth='2' strokeLinecap='round' strokeLinejoin='round'\r\n             className='feather feather-share-2'>\r\n            <circle cx='18' cy='5' r='3'/>\r\n            <circle cx='6' cy='12' r='3'/>\r\n            <circle cx='18' cy='19' r='3'/>\r\n            <line x1='8.59' y1='13.51' x2='15.42' y2='17.49'/>\r\n            <line x1='15.41' y1='6.51' x2='8.59' y2='10.49'/>\r\n        </svg>\r\n    )\r\n}","import React, {useCallback} from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport {LogoIcon} from './LogoIcon'\r\nimport {AuthType} from '../../../types/auth-types'\r\nimport {AppBar, Avatar, Box, Button, IconButton, Toolbar, Typography} from '@mui/material'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {PATH} from '../../../routes/routes'\r\nimport {RootState} from '../../../redux/store'\r\nimport {logout} from '../../../redux/reducers/auth-reducer'\r\n\r\nexport const Header: React.FC = React.memo(() => {\r\n    const auth = useSelector<RootState, AuthType>(state => state.auth)\r\n    const dispatch = useDispatch()\r\n\r\n    const logoutHandler = useCallback(() => dispatch(logout()), [dispatch])\r\n\r\n    return (\r\n        <AppBar position='sticky'>\r\n            <Toolbar>\r\n                <IconButton\r\n                    href={PATH.ROOT}\r\n                    size='large'\r\n                    edge='start'\r\n                    color='inherit'\r\n                    aria-label='menu'\r\n                    sx={{mr: 2}}>\r\n                    <LogoIcon/>\r\n                </IconButton>\r\n\r\n                <Typography variant='h6' component='div' sx={{flexGrow: 1}}>\r\n                    Social Network\r\n                </Typography>\r\n\r\n                {auth.isAuth\r\n                    ? <Box sx={{display: 'flex', alignItems: 'center', gap: 2}}>\r\n                        <span>{auth.login}</span>\r\n                        <Avatar alt={''} src={'https://sun9-5.userapi.com/impf/c836635/v836635330/314ed/9md97EBkSPg.jpg?size=600x600&quality=96&sign=302798ae13b76abf476b1e71420b702f&type=album'}/>\r\n                        <Button onClick={logoutHandler} variant={'contained'} sx={{ml: 2}}>Logout</Button>\r\n                    </Box>\r\n                    : <Link to={PATH.LOGIN}>Login Page</Link>}\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n})","import React from 'react'\r\nimport {Box, useScrollTrigger, Zoom} from '@mui/material'\r\n\r\nexport const ScrollTop: React.FC = ({children}) => {\r\n    const trigger = useScrollTrigger({\r\n        disableHysteresis: true,\r\n        threshold: 100,\r\n    })\r\n\r\n    const handleClick = (event: React.MouseEvent<HTMLDivElement>) => {\r\n        const anchor = ((event.target as HTMLDivElement).ownerDocument || document).querySelector('#back-to-top-anchor')\r\n        if (anchor) {\r\n            anchor.scrollIntoView({\r\n                behavior: 'smooth',\r\n                block: 'center',\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Zoom in={trigger}>\r\n            <Box onClick={handleClick}\r\n                 role='presentation'\r\n                 sx={{position: 'fixed', bottom: 16, right: 16}}>\r\n                {children}\r\n            </Box>\r\n        </Zoom>\r\n    )\r\n}","import React, {lazy, Suspense, useEffect} from 'react'\r\nimport {Redirect, Route, Switch} from 'react-router-dom'\r\nimport './index.css'\r\nimport {LoginContainer} from './components/Content/Login/LoginContainer'\r\nimport {SidebarContainer} from './components/Content/Sidebar/SidebarContainer'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {Loader} from './components/UI/Loader/Loader'\r\nimport {Error404} from './components/Content/ErrorPage/Error404'\r\nimport {Box, Container, CssBaseline, Fab, Grid} from '@mui/material'\r\nimport {Header} from './components/Content/Header/Header'\r\nimport {ScrollTop} from './components/UI/ScrollTop/ScrollTop'\r\nimport {initialization} from './redux/reducers/app-reducer'\r\nimport {PATH} from './routes/routes'\r\nimport {RootState} from './redux/store'\r\n\r\nconst ProfileContainer = lazy(() => import('./components/Content/Profile/ProfileContainer'))\r\nconst DialogsContainer = lazy(() => import('./components/Content/Dialogs/DialogsContainer'))\r\nconst UsersContainer = lazy(() => import('./components/Content/Users/UsersContainer'))\r\n\r\nexport const App: React.FC = () => {\r\n    const dispatch = useDispatch()\r\n    const isInitialized = useSelector<RootState>(state => state.app.isInitialized)\r\n\r\n    useEffect(() => {\r\n        dispatch(initialization())\r\n    }, [dispatch])\r\n\r\n    if (!isInitialized) return <Loader/>\r\n\r\n    return (\r\n        <>\r\n            <CssBaseline/>\r\n            <Box id='back-to-top-anchor'/>\r\n            <Header/>\r\n\r\n            <Container maxWidth='lg' style={{marginTop: 24, marginBottom: 24}}>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={2}>\r\n                        <SidebarContainer/>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={10}>\r\n                        <Suspense fallback={<Loader/>}>\r\n                            <Switch>\r\n                                <Route path={PATH.ROOT} exact>\r\n                                    <Redirect to={PATH.PROFILE}/>\r\n                                </Route>\r\n\r\n                                <Route path={PATH.PROFILE_WITH_ID}>\r\n                                    <ProfileContainer/>\r\n                                </Route>\r\n\r\n                                <Route path={PATH.DIALOGS}>\r\n                                    <DialogsContainer/>\r\n                                </Route>\r\n\r\n                                <Route path={PATH.USERS}>\r\n                                    <UsersContainer/>\r\n                                </Route>\r\n\r\n                                <Route path={PATH.LOGIN}>\r\n                                    <LoginContainer/>\r\n                                </Route>\r\n\r\n                                <Route path={PATH.ERROR}>\r\n                                    <Error404/>\r\n                                </Route>\r\n                            </Switch>\r\n                        </Suspense>\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n\r\n            <ScrollTop>\r\n                <Fab color='primary' aria-label='scroll back to top'>Up</Fab>\r\n            </ScrollTop>\r\n        </>\r\n    )\r\n}","import {createTheme} from '@mui/material'\r\n\r\nexport const darkTheme = createTheme({\r\n    palette: {\r\n        mode: 'dark',\r\n    },\r\n})\r\n\r\nexport const defaultTheme = createTheme({\r\n    palette: {\r\n        mode: 'light',\r\n        primary: {\r\n            main: '#363636'\r\n        }\r\n    },\r\n})","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport {BrowserRouter, HashRouter} from 'react-router-dom'\r\nimport './index.css'\r\nimport {store} from './redux/store'\r\nimport {App} from './App'\r\nimport {Provider} from 'react-redux'\r\nimport {defaultTheme} from './components/UI/MUI/theme'\r\nimport {ThemeProvider} from '@mui/material'\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <ThemeProvider theme={defaultTheme}>\r\n                    <App/>\r\n                </ThemeProvider>\r\n            </Provider>\r\n        </HashRouter>\r\n    </React.StrictMode>, document.getElementById('root'))\r\n\r\n// @ts-ignore\r\nwindow.store = store","export type ServerResponse<Data = {}, RC = ResultCodes> = {\r\n    resultCode: RC\r\n    messages: string[]\r\n    data: Data\r\n}\r\n\r\nexport enum ResultCodes {\r\n    Success = 0,\r\n    Error = 1,\r\n}\r\n\r\nexport enum ResultCodeForCaptcha {\r\n    Captcha = 10\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formField\":\"Form_formField__116nl\",\"formFieldCheckbox\":\"Form_formFieldCheckbox__NvXjO\",\"errorMessage\":\"Form_errorMessage__23kLT\",\"errorBorder\":\"Form_errorBorder__23wc5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorPageWrapper\":\"Error404_errorPageWrapper__1TOhY\",\"error404\":\"Error404_error404__2f1Ke\",\"errorImg\":\"Error404_errorImg__1f-BU\",\"pageNotFound\":\"Error404_pageNotFound__3f5-a\"};","import React from 'react'\r\nimport {useField} from 'formik'\r\nimport s from '../Form.module.css'\r\nimport {TextField} from '@mui/material'\r\n\r\ntype FormInputPropsType = {\r\n    label: string\r\n    name: string\r\n    type?: 'text' | 'email' | 'password'\r\n    id?: string\r\n}\r\n\r\nexport const FormInput: React.FC<FormInputPropsType> = React.memo(({...props}) => {\r\n    const [field, meta] = useField(props)\r\n\r\n    return (\r\n        <div className={s.formField}>\r\n            <TextField {...field} {...props} variant='outlined' error={!!meta.error}/>\r\n            {meta.touched && meta.error && <div className={s.errorMessage}>{meta.error}</div>}\r\n        </div>\r\n    )\r\n})"],"sourceRoot":""}