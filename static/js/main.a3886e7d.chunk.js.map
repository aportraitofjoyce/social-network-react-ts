{"version":3,"sources":["api/axios-instance.ts","components/UI/Form/FormCheckbox/FormCheckbox.tsx","components/Content/Login/Login.module.css","types/api-types.ts","redux/actions/auth-actions.ts","redux/reducers/profile-reducer.ts","redux/reducers/dialogs-reducer.ts","redux/reducers/sidebar-reducer.ts","redux/reducers/users-reducer.ts","api/auth-api.ts","api/security-api.ts","redux/actions/app-actions.ts","redux/reducers/auth-reducer.ts","redux/reducers/app-reducer.ts","redux/reducers/root-reducer.ts","redux/store.ts","components/Content/Login/LoginForm/LoginForm.tsx","components/Content/Login/Login.tsx","components/Content/Login/LoginContainer.tsx","components/Content/Header/LogoIcon.tsx","components/Content/Header/Header.tsx","components/Content/Header/HeaderContainer.tsx","components/Content/Sidebar/Sidebar.tsx","components/Content/Sidebar/SidebarContainer.tsx","components/Content/ErrorPage/Error404.tsx","App.tsx","index.tsx","redux/actions/users-actions.ts","api/users-api.ts","api/follow-api.ts","components/UI/Form/Form.module.css","redux/actions/profile-actions.ts","api/profile-api.ts","components/Content/ErrorPage/Error404.module.css","components/UI/Form/FormInput/FormInput.tsx","components/Content/Header/Header.module.css","components/Content/Sidebar/Sidebar.module.css","components/UI/Loader/Loader.tsx","components/UI/Loader/Loader.module.css","types/common-types.ts","redux/actions/dialogs-actions.ts"],"names":["axiosInstance","axios","create","baseURL","withCredentials","headers","FormCheckbox","React","memo","children","props","useField","type","field","meta","className","s","formFieldCheckbox","touched","error","errorMessage","module","exports","ResultCodesTypes","ResultCodeForCaptchaType","AUTH_ACTIONS_TYPE","initialState","userProfile","userStatus","dataForMyPosts","src","alt","text","likes","newPost","dataForFriends","id","v1","name","dataForMessages","from","message","newMessage","dataForSidebar","link","PATH","PROFILE","DIALOGS","USERS","usersData","pageSize","totalUsersCount","currentPage","isLoading","followLoader","search","term","followers","authAPI","get","then","response","data","email","password","rememberMe","captcha","post","delete","securityAPI","url","APP_ACTIONS_TYPE","setAuthUserData","login","SET_USER_DATA","payload","checkAuth","dispatch","a","resultCode","Success","logout","LOGOUT","alert","getCaptchaURL","SET_CAPTCHA","isAuth","captchaURL","successInitialization","status","SUCCESS_INITIALIZATION","initialized","rootReducer","combineReducers","profile","state","action","PROFILE_ACTIONS_TYPES","ADD_POST","SET_USER_PROFILE","SET_USER_STATUS","SET_USER_AVATAR","photos","userAvatar","dialogs","DIALOGS_ACTIONS_TYPES","SEND_MESSAGE","sidebar","users","USERS_ACTIONS_TYPES","FOLLOW","map","user","followed","SET_USERS","SET_CURRENT_PAGE","page","SET_TOTAL_USERS_COUNT","total","TOGGLE_LOADER","TOGGLE_FOLLOW_LOADER","filter","u","SET_SEARCH_PARAMS","auth","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","LoginForm","onSubmit","initialValues","validationSchema","Yup","required","max","values","resetForm","setStatus","FormInput","label","placeholder","style","fontSize","fontWeight","Login","fromWrapper","onClick","LoginContainer","useDispatch","useSelector","loginOnSite","useCallback","Captcha","messages","logoutFromSite","to","LogoIcon","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","cx","cy","r","x1","y1","x2","y2","Header","wrapper","container","ROOT","logoWrapper","LOGIN","HeaderContainer","logoutHandler","Sidebar","mappedSidebarItems","item","activeClassName","active","SidebarContainer","Error404","errorPageWrapper","error404","errorImg","pageNotFound","ProfileContainer","lazy","DialogsContainer","UsersContainer","App","useEffect","fallback","Loader","path","exact","PROFILE_WITH_ID","ERROR","ReactDOM","render","StrictMode","document","getElementById","usersAPI","followAPI","follow","setUsers","setCurrentPage","setTotalUsersCount","toggleLoader","toggleFollowLoader","setSearchParams","requestUsers","items","totalCount","changeCurrentPage","followUser","profileAPI","put","avatarFile","formData","FormData","append","description","addPost","setUserStatus","getUserProfile","getUserStatus","updateUserStatus","updateUserAvatar","updateUserDescription","userDescription","getState","formField","htmlFor","errorBorder","loadingWrapper","loading","sendMessage"],"mappings":"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","file":"static/js/main.a3886e7d.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nexport const axiosInstance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {'API-KEY': '6f228861-1f0c-43fb-a420-fcf28121de49'},\r\n})","import React from 'react'\r\nimport {useField} from 'formik'\r\nimport s from '../Form.module.css'\r\n\r\ntype FormCheckboxPropsType = {\r\n    name: string\r\n}\r\n\r\nexport const FormCheckbox: React.FC<FormCheckboxPropsType> = React.memo(({children, ...props}) => {\r\n    const [field, meta] = useField({...props, type: 'checkbox'})\r\n\r\n    return (\r\n        <div className={s.formFieldCheckbox}>\r\n            <label>\r\n                <input type='checkbox' {...field} {...props}/>\r\n                {children}\r\n            </label>\r\n            {meta.touched && meta.error && <div className={s.errorMessage}>{meta.error}</div>}\r\n        </div>\r\n    )\r\n})","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fromWrapper\":\"Login_fromWrapper__27jQY\"};","export type ResponseType<Data = {}, RC = ResultCodesTypes> = {\r\n    resultCode: RC\r\n    messages: string[]\r\n    data: Data\r\n}\r\n\r\nexport enum ResultCodesTypes {\r\n    Success = 0,\r\n    Error = 1,\r\n}\r\n\r\nexport enum ResultCodeForCaptchaType {\r\n    Captcha = 10\r\n}","import {authAPI} from '../../api/auth-api'\r\nimport {ThunkType} from '../../types/common-types'\r\nimport {securityAPI} from '../../api/security-api'\r\nimport {ResultCodeForCaptchaType, ResultCodesTypes} from '../../types/api-types'\r\n\r\nexport enum AUTH_ACTIONS_TYPE {\r\n    SET_USER_DATA = 'SET_USER_DATA',\r\n    LOGOUT = 'LOGOUT',\r\n    SET_CAPTCHA = 'SET_CAPTCHA'\r\n}\r\n\r\nexport type AuthActionsType =\r\n    | ReturnType<typeof setAuthUserData>\r\n    | ReturnType<typeof changeAuthWhenLogout>\r\n    | ReturnType<typeof setCaptcha>\r\n\r\n// Actions\r\nexport const setAuthUserData = (id: number, login: string, email: string) => ({\r\n    type: AUTH_ACTIONS_TYPE.SET_USER_DATA,\r\n    payload: {id, login, email}\r\n} as const)\r\n\r\nexport const changeAuthWhenLogout = () => ({\r\n    type: AUTH_ACTIONS_TYPE.LOGOUT\r\n} as const)\r\n\r\nexport const setCaptcha = (captcha: string) => ({\r\n    type: AUTH_ACTIONS_TYPE.SET_CAPTCHA,\r\n    payload: {captcha}\r\n} as const)\r\n\r\n// Thunks\r\nexport const checkAuth = (): ThunkType => async dispatch => {\r\n    const response = await authAPI.checkAuth()\r\n    const {id, login, email} = response.data\r\n    response.resultCode === ResultCodesTypes.Success && dispatch(setAuthUserData(id, login, email))\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean,\r\n                      setStatus: (status: string[]) => void, captcha: string): ThunkType => async dispatch => {\r\n    const response = await authAPI.login(email, password, rememberMe, captcha)\r\n    if (response.resultCode === ResultCodesTypes.Success) {\r\n        await dispatch(checkAuth())\r\n    } else if (response.resultCode === ResultCodeForCaptchaType.Captcha) {\r\n        setStatus(response.messages)\r\n        await dispatch(getCaptchaURL())\r\n    } else {\r\n        setStatus(response.messages)\r\n    }\r\n}\r\n\r\nexport const logout = (): ThunkType => async dispatch => {\r\n    try {\r\n        await authAPI.logout()\r\n        dispatch(changeAuthWhenLogout())\r\n    } catch (e) {\r\n        alert(e)\r\n    }\r\n}\r\n\r\nexport const getCaptchaURL = (): ThunkType => async dispatch => {\r\n    const response = await securityAPI.getCaptchaURL()\r\n    dispatch(setCaptcha(response))\r\n}","import {ProfileType} from '../../types/profile-types'\r\nimport {PROFILE_ACTIONS_TYPES, ProfileActionsType} from '../actions/profile-actions'\r\n\r\nconst initialState: ProfileType = {\r\n    userProfile: null,\r\n    userStatus: '',\r\n\r\n    dataForMyPosts: [\r\n        {\r\n            src: 'https://sun9-5.userapi.com/impf/c836635/v836635330/314ed/9md97EBkSPg.jpg?size=600x600&quality=96&sign=302798ae13b76abf476b1e71420b702f&type=album',\r\n            alt: 'My profile',\r\n            text: 'My first post',\r\n            likes: 10\r\n        },\r\n        {\r\n            src: 'https://sun9-5.userapi.com/impf/c836635/v836635330/314ed/9md97EBkSPg.jpg?size=600x600&quality=96&sign=302798ae13b76abf476b1e71420b702f&type=album',\r\n            alt: 'My profile',\r\n            text: 'My second post',\r\n            likes: 5\r\n        },\r\n        {\r\n            src: 'https://sun9-5.userapi.com/impf/c836635/v836635330/314ed/9md97EBkSPg.jpg?size=600x600&quality=96&sign=302798ae13b76abf476b1e71420b702f&type=album',\r\n            alt: 'My profile',\r\n            text: 'My third post',\r\n            likes: 43\r\n        },\r\n        {\r\n            src: 'https://sun9-5.userapi.com/impf/c836635/v836635330/314ed/9md97EBkSPg.jpg?size=600x600&quality=96&sign=302798ae13b76abf476b1e71420b702f&type=album',\r\n            alt: 'My profile',\r\n            text: 'My fourth post',\r\n            likes: 0\r\n        }\r\n    ],\r\n\r\n    newPost: {\r\n        src: 'https://sun9-5.userapi.com/impf/c836635/v836635330/314ed/9md97EBkSPg.jpg?size=600x600&quality=96&sign=302798ae13b76abf476b1e71420b702f&type=album',\r\n        alt: 'My profile',\r\n        text: '',\r\n        likes: 0\r\n    }\r\n}\r\n\r\nexport const profileReducer = (state = initialState, action: ProfileActionsType): ProfileType => {\r\n    switch (action.type) {\r\n        case PROFILE_ACTIONS_TYPES.ADD_POST:\r\n            return {\r\n                ...state,\r\n                dataForMyPosts: [{\r\n                    ...state.newPost,\r\n                    text: action.payload.text\r\n                },\r\n                    ...state.dataForMyPosts],\r\n            }\r\n\r\n        case PROFILE_ACTIONS_TYPES.SET_USER_PROFILE:\r\n            return {\r\n                ...state,\r\n                userProfile: action.payload.userProfile,\r\n            }\r\n\r\n        case PROFILE_ACTIONS_TYPES.SET_USER_STATUS:\r\n            return {\r\n                ...state,\r\n                userStatus: action.payload.userStatus\r\n            }\r\n\r\n        case PROFILE_ACTIONS_TYPES.SET_USER_AVATAR:\r\n            return {\r\n                ...state,\r\n                userProfile: {\r\n                    ...state.userProfile,\r\n                    photos: action.payload.userAvatar\r\n                }\r\n            } as ProfileType\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import {v1} from 'uuid'\r\nimport {DialogsType} from '../../types/dialogs-types'\r\nimport {DIALOGS_ACTIONS_TYPES, DialogsActionsType} from '../actions/dialogs-actions'\r\n\r\nconst initialState: DialogsType = {\r\n    dataForFriends: [\r\n        {id: v1(), name: 'Me'},\r\n        {id: v1(), name: 'Maxim'},\r\n        {id: v1(), name: 'Andrei'},\r\n    ],\r\n\r\n    dataForMessages: [\r\n        {id: v1(), from: 'Me', message: 'Привет, как дела?'},\r\n        {id: v1(), from: 'Andrei', message: 'Ку, отлично.'},\r\n        {id: v1(), from: 'Me', message: 'Посмотрим вместе аниме?'},\r\n        {id: v1(), from: 'Andrei', message: 'С удовольствием, прямо сейчас?'},\r\n        {id: v1(), from: 'Me', message: 'Ага!'}\r\n    ],\r\n    newMessage: {\r\n        id: v1(),\r\n        from: 'Me',\r\n        message: ''\r\n    }\r\n}\r\n\r\nexport const dialogsReducer = (state = initialState, action: DialogsActionsType): DialogsType => {\r\n    switch (action.type) {\r\n        case DIALOGS_ACTIONS_TYPES.SEND_MESSAGE:\r\n            return {\r\n                ...state,\r\n                dataForMessages: [...state.dataForMessages, {...state.newMessage, message: action.payload.text}],\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import {ActionsType, PATH} from '../../types/common-types'\r\nimport {SidebarType} from '../../types/sidebar-types'\r\n\r\nconst initialState: SidebarType = {\r\n    dataForSidebar: [\r\n        {name: 'Profile', link: PATH.PROFILE},\r\n        {name: 'Dialogs', link: PATH.DIALOGS},\r\n        {name: 'Users', link: PATH.USERS}\r\n    ]\r\n}\r\n\r\nexport const sidebarReducer = (state = initialState, action: ActionsType): SidebarType => {\r\n    return state\r\n}\r\n","import {UsersType} from '../../types/users-types'\r\nimport {USERS_ACTIONS_TYPES, UsersActionsType} from '../actions/users-actions'\r\n\r\nconst initialState: UsersType = {\r\n    usersData: [],\r\n    pageSize: 25,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isLoading: false,\r\n    followLoader: [],\r\n    search: {\r\n        term: '',\r\n        followers: null\r\n    }\r\n}\r\n\r\nexport const usersReducer = (state = initialState, action: UsersActionsType): UsersType => {\r\n    switch (action.type) {\r\n        case USERS_ACTIONS_TYPES.FOLLOW:\r\n            return {\r\n                ...state,\r\n                usersData: state.usersData.map((user) => user.id === action.payload.id\r\n                    ? {...user, followed: !user.followed}\r\n                    : user),\r\n            }\r\n\r\n        case USERS_ACTIONS_TYPES.SET_USERS:\r\n            return {...state, usersData: [...action.payload.users]}\r\n\r\n        case USERS_ACTIONS_TYPES.SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.payload.page}\r\n\r\n        case USERS_ACTIONS_TYPES.SET_TOTAL_USERS_COUNT:\r\n            return {...state, totalUsersCount: action.payload.total}\r\n\r\n        case USERS_ACTIONS_TYPES.TOGGLE_LOADER:\r\n            return {...state, isLoading: action.payload.status}\r\n\r\n        case USERS_ACTIONS_TYPES.TOGGLE_FOLLOW_LOADER:\r\n            return {\r\n                ...state,\r\n                followLoader: action.payload.status\r\n                    ? [...state.followLoader, action.payload.id]\r\n                    : state.followLoader.filter(u => u !== action.payload.id)\r\n            }\r\n\r\n        case USERS_ACTIONS_TYPES.SET_SEARCH_PARAMS:\r\n            return {\r\n                ...state,\r\n                search: {...action.payload}\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import {axiosInstance} from './axios-instance'\r\nimport {ResponseType, ResultCodeForCaptchaType, ResultCodesTypes} from '../types/api-types'\r\n\r\ntype CheckAuthDataResponseType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\ntype LoginDataResponseType = {\r\n    userId: number\r\n}\r\n\r\nexport const authAPI = {\r\n    checkAuth: () => axiosInstance\r\n        .get<ResponseType<CheckAuthDataResponseType>>('auth/me')\r\n        .then(response => response.data),\r\n\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => axiosInstance\r\n        .post<ResponseType<LoginDataResponseType, ResultCodesTypes & ResultCodeForCaptchaType>>('auth/login', {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        })\r\n        .then(response => response.data),\r\n\r\n    logout: () => axiosInstance\r\n        .delete<ResponseType>('auth/login')\r\n        .then(response => response.data)\r\n}","import {axiosInstance} from './axios-instance'\r\n\r\nexport const securityAPI = {\r\n    getCaptchaURL: () => axiosInstance\r\n        .get<{ url: string }>('security/get-captcha-url')\r\n        .then(response => response.data.url)\r\n}","import {ThunkType} from '../../types/common-types'\r\nimport {checkAuth} from './auth-actions'\r\n\r\nexport enum APP_ACTIONS_TYPE {\r\n    SUCCESS_INITIALIZATION = 'SUCCESS_INITIALIZATION'\r\n}\r\n\r\nexport type AppActionsType =\r\n    | ReturnType<typeof successInitialization>\r\n\r\n// Actions\r\nexport const successInitialization = (status: boolean) => ({\r\n    type: APP_ACTIONS_TYPE.SUCCESS_INITIALIZATION, payload: {status}\r\n} as const)\r\n\r\n// Thunk\r\nexport const initialization = (): ThunkType => async dispatch => {\r\n    dispatch(successInitialization(false))\r\n    await dispatch(checkAuth())\r\n    dispatch(successInitialization(true))\r\n}","import {AuthType} from '../../types/auth-types'\r\nimport {AUTH_ACTIONS_TYPE, AuthActionsType} from '../actions/auth-actions'\r\n\r\nconst initialState: AuthType = {\r\n    id: null,\r\n    login: null,\r\n    email: null,\r\n    isAuth: false,\r\n    captchaURL: ''\r\n}\r\n\r\nexport const authReducer = (state = initialState, action: AuthActionsType): AuthType => {\r\n    switch (action.type) {\r\n        case AUTH_ACTIONS_TYPE.SET_USER_DATA:\r\n            return {...state, ...action.payload, isAuth: true}\r\n\r\n        case AUTH_ACTIONS_TYPE.LOGOUT:\r\n            return {...state, isAuth: false}\r\n\r\n        case AUTH_ACTIONS_TYPE.SET_CAPTCHA:\r\n            return {...state, captchaURL: action.payload.captcha}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import {APP_ACTIONS_TYPE, AppActionsType} from '../actions/app-actions'\r\n\r\nconst initialState = {\r\n    initialized: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case APP_ACTIONS_TYPE.SUCCESS_INITIALIZATION:\r\n            return {\r\n                ...state,\r\n                initialized: action.payload.status\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import {combineReducers} from 'redux'\r\nimport {profileReducer} from './profile-reducer'\r\nimport {dialogsReducer} from './dialogs-reducer'\r\nimport {sidebarReducer} from './sidebar-reducer'\r\nimport {usersReducer} from './users-reducer'\r\nimport {authReducer} from './auth-reducer'\r\nimport {appReducer} from './app-reducer'\r\n\r\nexport const rootReducer = combineReducers(\r\n    {\r\n        profile: profileReducer,\r\n        dialogs: dialogsReducer,\r\n        sidebar: sidebarReducer,\r\n        users: usersReducer,\r\n        auth: authReducer,\r\n        app: appReducer\r\n    }\r\n)","import {applyMiddleware, compose, createStore} from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport {rootReducer} from './reducers/root-reducer'\r\n\r\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)))","import React from 'react'\r\nimport {Form, Formik} from 'formik'\r\nimport * as Yup from 'yup'\r\nimport {FormInput} from '../../../UI/Form/FormInput/FormInput'\r\nimport {FormCheckbox} from '../../../UI/Form/FormCheckbox/FormCheckbox'\r\n\r\ntype LoginFormPropsType = {\r\n    onSubmit: (email: string, password: string, rememberMe: boolean,\r\n               setStatus: (status: string[]) => void, captcha: string) => void\r\n    captchaURL: string\r\n}\r\n\r\nexport const LoginForm: React.FC<LoginFormPropsType> = React.memo(props => {\r\n    const {onSubmit, captchaURL} = props\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                email: '',\r\n                password: '',\r\n                rememberMe: false,\r\n                captcha: ''\r\n            }}\r\n\r\n            validationSchema={Yup.object({\r\n                email: Yup.string()\r\n                    .email('Invalid email address')\r\n                    .required('Required'),\r\n                password: Yup.string()\r\n                    .max(20, 'Must be 20 characters or less')\r\n                    .required('Required'),\r\n                /*captcha: Yup.string()\r\n                    .required('Required'),*/\r\n            })}\r\n\r\n            onSubmit={(values, {resetForm, setStatus}) => {\r\n                // await resetForm()\r\n                onSubmit(values.email, values.password, values.rememberMe, setStatus, values.captcha)\r\n            }}>\r\n\r\n            {({status}) => <Form className={'formikFormContainer'}>\r\n                <FormInput\r\n                    label='Email'\r\n                    name='email'\r\n                    type='email'\r\n                    placeholder='Type your email...'/>\r\n\r\n                <FormInput\r\n                    label='Password'\r\n                    name='password'\r\n                    type='password'\r\n                    placeholder='Type your password...'/>\r\n\r\n                <FormCheckbox name='rememberMe'>Remember Me</FormCheckbox>\r\n\r\n                <span style={{fontSize: 24, fontWeight: 'bold'}}>{status}</span>\r\n\r\n                {captchaURL &&\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<img src={captchaURL} alt={captchaURL}/>\r\n\t\t\t\t\t<FormInput\r\n\t\t\t\t\t\tlabel='Captcha'\r\n\t\t\t\t\t\tname='captcha'\r\n\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\tplaceholder='Type symbols...'/>\r\n\t\t\t\t</div>}\r\n\r\n                <button type='submit'>Submit</button>\r\n            </Form>}\r\n        </Formik>\r\n    )\r\n})","import React from 'react'\r\nimport s from './Login.module.css'\r\nimport {LoginForm} from './LoginForm/LoginForm'\r\n\r\ntype LoginPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean,\r\n            setStatus: (status: string[]) => void, captcha: string) => void\r\n    logout: () => void\r\n    captchaURL: string\r\n}\r\n\r\nexport const Login: React.FC<LoginPropsType> = React.memo(props => {\r\n    const {login, logout, captchaURL} = props\r\n\r\n    return (\r\n        <div className={s.fromWrapper}>\r\n            <h1>Login page</h1>\r\n            <LoginForm onSubmit={login} captchaURL={captchaURL}/>\r\n            <button onClick={logout}>Logout</button>\r\n        </div>\r\n    )\r\n})","import React, {useCallback} from 'react'\r\nimport {Login} from './Login'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {login, logout} from '../../../redux/actions/auth-actions'\r\nimport {PATH, StateType} from '../../../types/common-types'\r\nimport {AuthType} from '../../../types/auth-types'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\nexport const LoginContainer: React.FC = React.memo(() => {\r\n    const dispatch = useDispatch()\r\n    const {isAuth, captchaURL} = useSelector<StateType, AuthType>(state => state.auth)\r\n\r\n    const loginOnSite = useCallback((email: string, password: string, rememberMe: boolean,\r\n                                     setStatus: (status: string[]) => void, captcha: string) => {\r\n        dispatch(login(email, password, rememberMe, setStatus, captcha))\r\n    }, [dispatch])\r\n\r\n    const logoutFromSite = useCallback(() => dispatch(logout()), [dispatch])\r\n\r\n    return !isAuth\r\n        ? <Login login={loginOnSite} logout={logoutFromSite} captchaURL={captchaURL}/>\r\n        : <Redirect to={PATH.PROFILE}/>\r\n})","import React from 'react'\r\n\r\nexport const LogoIcon = () => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"40\" height=\"40\" viewBox=\"0 0 24 24\" fill=\"none\"\r\n             stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\r\n             className=\"feather feather-share-2\">\r\n            <circle cx=\"18\" cy=\"5\" r=\"3\"/>\r\n            <circle cx=\"6\" cy=\"12\" r=\"3\"/>\r\n            <circle cx=\"18\" cy=\"19\" r=\"3\"/>\r\n            <line x1=\"8.59\" y1=\"13.51\" x2=\"15.42\" y2=\"17.49\"/>\r\n            <line x1=\"15.41\" y1=\"6.51\" x2=\"8.59\" y2=\"10.49\"/>\r\n        </svg>\r\n    )\r\n}","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport s from './Header.module.css'\r\nimport {LogoIcon} from './LogoIcon'\r\nimport {PATH} from '../../../types/common-types'\r\nimport {AuthType} from '../../../types/auth-types'\r\n\r\nexport type HeaderPropsType = {\r\n    auth: AuthType\r\n    logout: () => void\r\n}\r\n\r\nexport const Header: React.FC<HeaderPropsType> = React.memo((props) => {\r\n    const {auth, logout} = props\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <div className={s.container}>\r\n                <Link to={PATH.ROOT} className={s.logoWrapper}>\r\n                    <LogoIcon/>\r\n                    <span>Social Network</span>\r\n                </Link>\r\n\r\n                {auth.isAuth\r\n                    ? <div>\r\n                        <span>{auth.login}</span>\r\n                        <button onClick={logout}>Logout</button>\r\n                    </div>\r\n                    : <Link to={PATH.LOGIN}>Login</Link>}\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React, {useCallback} from 'react'\r\nimport {Header} from './Header'\r\nimport {StateType} from '../../../types/common-types'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {logout} from '../../../redux/actions/auth-actions'\r\nimport {AuthType} from '../../../types/auth-types'\r\n\r\nexport const HeaderContainer: React.FC = React.memo(() => {\r\n    const auth = useSelector<StateType, AuthType>(state => state.auth)\r\n    const dispatch = useDispatch()\r\n\r\n    const logoutHandler = useCallback(() => dispatch(logout()), [dispatch])\r\n\r\n    return <Header auth={auth} logout={logoutHandler}/>\r\n})","import React from 'react'\r\nimport s from './Sidebar.module.css'\r\nimport {v1} from 'uuid'\r\nimport {dataForSidebarType} from '../../../types/sidebar-types'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\ntype SidebarPropsType = {\r\n    dataForSidebar: dataForSidebarType[]\r\n}\r\n\r\nexport const Sidebar: React.FC<SidebarPropsType> = React.memo(props => {\r\n    const {dataForSidebar} = props\r\n\r\n    const mappedSidebarItems = dataForSidebar.map(item => {\r\n        return (\r\n            <NavLink key={v1()}\r\n                     to={item.link}\r\n                     activeClassName={s.active}>\r\n                <span>{item.name}</span>\r\n            </NavLink>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <aside className={s.wrapper}>\r\n            <nav className={s.container}>\r\n                {mappedSidebarItems}\r\n            </nav>\r\n        </aside>\r\n    )\r\n})\r\n\r\n","import React from 'react'\r\nimport {useSelector} from 'react-redux'\r\nimport {Sidebar} from './Sidebar'\r\nimport {StateType} from '../../../types/common-types'\r\nimport {SidebarType} from '../../../types/sidebar-types'\r\n\r\nexport const SidebarContainer: React.FC = React.memo(() => {\r\n    const {dataForSidebar} = useSelector<StateType, SidebarType>(state => state.sidebar)\r\n\r\n    return <Sidebar dataForSidebar={dataForSidebar}/>\r\n})","import React from 'react'\r\nimport s from './Error404.module.css'\r\n\r\nexport const Error404: React.FC = React.memo(() => {\r\n    return (\r\n        <div className={s.errorPageWrapper}>\r\n            <div className={s.error404}>404</div>\r\n            <img\r\n                src='https://cdn.statically.io/img/i.pinimg.com/originals/ef/0b/58/ef0b58bc4be3f9622c10a73fe685c57d.jpg'\r\n                alt=''\r\n                className={s.errorImg}/>\r\n\r\n            <div className={s.pageNotFound}>\r\n                Page not found!\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React, {lazy, Suspense, useEffect} from 'react'\nimport {Redirect, Route, Switch} from 'react-router-dom'\nimport './index.css'\nimport {PATH, StateType} from './types/common-types'\nimport {LoginContainer} from './components/Content/Login/LoginContainer'\nimport {HeaderContainer} from './components/Content/Header/HeaderContainer'\nimport {SidebarContainer} from './components/Content/Sidebar/SidebarContainer'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {initialization} from './redux/actions/app-actions'\nimport {Loader} from './components/UI/Loader/Loader'\nimport {Error404} from './components/Content/ErrorPage/Error404'\n\nconst ProfileContainer = lazy(() => import('./components/Content/Profile/ProfileContainer'))\nconst DialogsContainer = lazy(() => import('./components/Content/Dialogs/DialogsContainer'))\nconst UsersContainer = lazy(() => import('./components/Content/Users/UsersContainer'))\n\nexport const App: React.FC = () => {\n    const dispatch = useDispatch()\n    const initialized = useSelector<StateType>(state => state.app.initialized)\n\n    useEffect(() => {\n        dispatch(initialization())\n    }, [dispatch])\n\n    if (!initialized) return <Loader/>\n\n    return (\n        <div className={'App'}>\n            <HeaderContainer/>\n\n            <div className={'ContentWrapper'}>\n                <SidebarContainer/>\n\n                <Suspense fallback={<Loader/>}>\n                    <Switch>\n                        <Route path={PATH.ROOT} exact>\n                            <Redirect to={PATH.PROFILE}/>\n                        </Route>\n\n                        <Route path={PATH.PROFILE_WITH_ID}>\n                            <ProfileContainer/>\n                        </Route>\n\n                        <Route path={PATH.DIALOGS}>\n                            <DialogsContainer/>\n                        </Route>\n\n                        <Route path={PATH.USERS}>\n                            <UsersContainer/>\n                        </Route>\n\n                        <Route path={PATH.LOGIN}>\n                            <LoginContainer/>\n                        </Route>\n\n                        <Route path={PATH.ERROR}>\n                            <Error404/>\n                        </Route>\n                    </Switch>\n                </Suspense>\n            </div>\n        </div>\n    )\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {BrowserRouter, HashRouter} from 'react-router-dom'\nimport './index.css'\nimport {store} from './redux/store'\nimport {App} from './App'\nimport {Provider} from 'react-redux'\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </HashRouter>\n    </React.StrictMode>, document.getElementById('root'))\n\n// @ts-ignore\nwindow.store = store","import {UserType} from '../../types/users-types'\r\nimport {usersAPI} from '../../api/users-api'\r\nimport {ThunkType} from '../../types/common-types'\r\nimport {followAPI} from '../../api/follow-api'\r\n\r\nexport enum USERS_ACTIONS_TYPES {\r\n    FOLLOW = 'FOLLOW',\r\n    SET_USERS = 'SET_USERS',\r\n    SET_CURRENT_PAGE = 'SET_CURRENT_PAGE',\r\n    SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT',\r\n    TOGGLE_LOADER = 'TOGGLE_LOADER',\r\n    TOGGLE_FOLLOW_LOADER = 'TOGGLE_FOLLOW_LOADER',\r\n    SET_SEARCH_PARAMS = 'SET_SEARCH_PARAMS'\r\n}\r\n\r\nexport type UsersActionsType =\r\n    | ReturnType<typeof follow>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof toggleLoader>\r\n    | ReturnType<typeof toggleFollowLoader>\r\n    | ReturnType<typeof setSearchParams>\r\n\r\n\r\n// Actions\r\nexport const follow = (id: number) => ({\r\n    type: USERS_ACTIONS_TYPES.FOLLOW,\r\n    payload: {id}\r\n} as const)\r\n\r\nexport const setUsers = (users: UserType[]) => ({\r\n    type: USERS_ACTIONS_TYPES.SET_USERS,\r\n    payload: {users}\r\n} as const)\r\n\r\nexport const setCurrentPage = (page: number) => ({\r\n    type: USERS_ACTIONS_TYPES.SET_CURRENT_PAGE,\r\n    payload: {page}\r\n} as const)\r\n\r\nexport const setTotalUsersCount = (total: number) => ({\r\n    type: USERS_ACTIONS_TYPES.SET_TOTAL_USERS_COUNT,\r\n    payload: {total}\r\n} as const)\r\n\r\nexport const toggleLoader = (status: boolean) => ({\r\n    type: USERS_ACTIONS_TYPES.TOGGLE_LOADER,\r\n    payload: {status}\r\n} as const)\r\n\r\nexport const toggleFollowLoader = (status: boolean, id: number) => ({\r\n    type: USERS_ACTIONS_TYPES.TOGGLE_FOLLOW_LOADER,\r\n    payload: {status, id}\r\n} as const)\r\n\r\nexport const setSearchParams = (term: string, followers: boolean | null) => ({\r\n    type: USERS_ACTIONS_TYPES.SET_SEARCH_PARAMS,\r\n    payload: {term, followers}\r\n} as const)\r\n\r\n\r\n// Thunks\r\nexport const requestUsers = (page: number, pageSize: number, term: string = '', followers: boolean | null = null): ThunkType => async dispatch => {\r\n    try {\r\n        dispatch(toggleLoader(true))\r\n\r\n        const response = await usersAPI.requestUsers(page, pageSize, term, followers)\r\n        dispatch(setUsers(response.items))\r\n        dispatch(setTotalUsersCount(response.totalCount))\r\n        dispatch(setCurrentPage(page))\r\n        dispatch(setSearchParams(term, followers))\r\n\r\n        dispatch(toggleLoader(false))\r\n    } catch (e) {\r\n        alert(e)\r\n    }\r\n}\r\n\r\nexport const changeCurrentPage = (page: number, pageSize: number, term: string, followers: boolean | null): ThunkType => async dispatch => {\r\n    dispatch(setCurrentPage(page))\r\n    dispatch(requestUsers(page, pageSize, term, followers))\r\n}\r\n\r\nexport const followUser = (id: number, followed: boolean): ThunkType => async dispatch => {\r\n    dispatch(toggleFollowLoader(true, id))\r\n\r\n    if (!followed) {\r\n        await followAPI.follow(id)\r\n        dispatch(follow(id))\r\n        dispatch(toggleFollowLoader(false, id))\r\n    }\r\n\r\n    if (followed) {\r\n        await followAPI.unfollow(id)\r\n        dispatch(follow(id))\r\n        dispatch(toggleFollowLoader(false, id))\r\n    }\r\n}","import {axiosInstance} from './axios-instance'\r\nimport {UserType} from '../types/users-types'\r\n\r\ntype UsersResponseType = {\r\n    totalCount: number\r\n    error: string\r\n    items: UserType[]\r\n}\r\n\r\nexport const usersAPI = {\r\n    requestUsers: (page: number, pageSize: number, term: string, followers: boolean | null) => axiosInstance\r\n        .get<UsersResponseType>(`users?count=${pageSize}&page=${page}&term=${term}` + (followers === null ? '' : `&friend=${followers}`))\r\n        .then(response => response.data)\r\n}","import {axiosInstance} from './axios-instance'\r\nimport {ResponseType} from '../types/api-types'\r\n\r\nexport const followAPI = {\r\n    follow: (id: number) => axiosInstance\r\n        .post<ResponseType>(`follow/${id}`)\r\n        .then(response => response.data),\r\n\r\n    unfollow: (id: number) => axiosInstance\r\n        .delete<ResponseType>(`follow/${id}`)\r\n        .then(response => response.data)\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formField\":\"Form_formField__1sCZI\",\"formFieldCheckbox\":\"Form_formFieldCheckbox__3kjMq\",\"errorMessage\":\"Form_errorMessage__1Y2D8\",\"errorBorder\":\"Form_errorBorder__6-Uxv\"};","import {UserProfilePhotosType, UserProfileType} from '../../types/profile-types'\r\nimport {ThunkType} from '../../types/common-types'\r\nimport {profileAPI} from '../../api/profile-api'\r\nimport {ResultCodesTypes} from '../../types/api-types'\r\n\r\nexport enum PROFILE_ACTIONS_TYPES {\r\n    ADD_POST = 'ADD_POST',\r\n    SET_USER_PROFILE = 'SET_USER_PROFILE',\r\n    SET_USER_STATUS = 'SET_USER_STATUS',\r\n    SET_USER_AVATAR = 'SET_USER_AVATAR',\r\n}\r\n\r\nexport type ProfileActionsType =\r\n    | ReturnType<typeof addPost>\r\n    | ReturnType<typeof setUserProfile>\r\n    | ReturnType<typeof setUserStatus>\r\n    | ReturnType<typeof setUserAvatar>\r\n\r\n\r\n// Actions\r\nexport const addPost = (text: string) => ({\r\n    type: PROFILE_ACTIONS_TYPES.ADD_POST,\r\n    payload: {text}\r\n} as const)\r\n\r\nexport const setUserProfile = (userProfile: UserProfileType) => ({\r\n    type: PROFILE_ACTIONS_TYPES.SET_USER_PROFILE,\r\n    payload: {userProfile}\r\n} as const)\r\n\r\nexport const setUserStatus = (userStatus: string) => ({\r\n    type: PROFILE_ACTIONS_TYPES.SET_USER_STATUS,\r\n    payload: {userStatus}\r\n} as const)\r\n\r\nexport const setUserAvatar = (userAvatar: UserProfilePhotosType) => ({\r\n    type: PROFILE_ACTIONS_TYPES.SET_USER_AVATAR,\r\n    payload: {userAvatar}\r\n} as const)\r\n\r\n\r\n// Thunks\r\nexport const getUserProfile = (id: number | null): ThunkType => async dispatch => {\r\n    const response = await profileAPI.getUserProfile(id)\r\n    dispatch(setUserProfile(response))\r\n}\r\n\r\nexport const getUserStatus = (id: number | null): ThunkType => async dispatch => {\r\n    const response = await profileAPI.getUserStatus(id)\r\n    dispatch(setUserStatus(response))\r\n}\r\n\r\nexport const updateUserStatus = (userStatus: string): ThunkType => async dispatch => {\r\n    const response = await profileAPI.updateUserStatus(userStatus)\r\n    response.resultCode === ResultCodesTypes.Success && dispatch(setUserStatus(userStatus))\r\n}\r\n\r\nexport const updateUserAvatar = (avatarFile: File): ThunkType => async dispatch => {\r\n    const response = await profileAPI.updateUserAvatar(avatarFile)\r\n    response.resultCode === ResultCodesTypes.Success && dispatch(setUserAvatar(response.data.photos)) && alert('Успешно!')\r\n    response.resultCode !== ResultCodesTypes.Success && alert(response.messages)\r\n}\r\n\r\nexport const updateUserDescription = (userDescription: UserProfileType): ThunkType =>\r\n    async (dispatch, getState) => {\r\n        const response = await profileAPI.updateUserDescription(userDescription)\r\n        if (response.resultCode === ResultCodesTypes.Success) {\r\n            const id = getState().auth.id\r\n            await dispatch(getUserProfile(id))\r\n        }\r\n    }","import {axiosInstance} from './axios-instance'\r\nimport {UserProfilePhotosType, UserProfileType} from '../types/profile-types'\r\nimport {ResponseType} from '../types/api-types'\r\n\r\nexport const profileAPI = {\r\n    getUserProfile: (id: number | null) => axiosInstance\r\n        .get<UserProfileType>(`profile/${id}`)\r\n        .then(response => response.data),\r\n\r\n    getUserStatus: (id: number | null) => axiosInstance\r\n        .get<string>(`profile/status/${id}`)\r\n        .then(response => response.data),\r\n\r\n    updateUserStatus: (status: string) => axiosInstance\r\n        .put<ResponseType>(`profile/status`, {status})\r\n        .then(response => response.data),\r\n\r\n    updateUserAvatar: (avatarFile: File) => {\r\n        const formData = new FormData()\r\n        formData.append('image', avatarFile)\r\n\r\n        return axiosInstance\r\n            .put<ResponseType<{ photos: UserProfilePhotosType }>>(`profile/photo`, formData)\r\n            .then(response => response.data)\r\n    },\r\n\r\n    updateUserDescription: (description: UserProfileType) => axiosInstance\r\n        .put<ResponseType>(`profile`, description)\r\n        .then(response => response.data)\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorPageWrapper\":\"Error404_errorPageWrapper__1j1kw\",\"error404\":\"Error404_error404__EmPtm\",\"errorImg\":\"Error404_errorImg__3oMS-\",\"pageNotFound\":\"Error404_pageNotFound__2CaRP\"};","import React from 'react'\r\nimport {useField} from 'formik'\r\nimport s from '../Form.module.css'\r\n\r\ntype FormInputPropsType = {\r\n    label: string\r\n    name: string\r\n    type: 'text' | 'email' | 'password'\r\n    placeholder: string\r\n    id?: string\r\n}\r\n\r\nexport const FormInput: React.FC<FormInputPropsType> = React.memo(({label, ...props}) => {\r\n    const [field, meta] = useField(props)\r\n\r\n    return (\r\n        <div className={s.formField}>\r\n            <label htmlFor={props.id || props.name}>{label}</label>\r\n            <input {...field} {...props} className={meta.error ? s.errorBorder : ''}/>\r\n            {meta.touched && meta.error && <div className={s.errorMessage}>{meta.error}</div>}\r\n        </div>\r\n    )\r\n})","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Header_wrapper__3jZPv\",\"container\":\"Header_container__2LYHX\",\"miniProfileImg\":\"Header_miniProfileImg__1x289\",\"logoWrapper\":\"Header_logoWrapper__nqon6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Sidebar_wrapper__38jnK\",\"container\":\"Sidebar_container__1dNie\",\"active\":\"Sidebar_active__1ixxA\"};","import React from 'react'\r\nimport s from './Loader.module.css'\r\n\r\nexport const Loader: React.FC = React.memo(() => {\r\n    return (\r\n        <div className={s.loadingWrapper}>\r\n            <div className={s.loading}>\r\n                <div/>\r\n                <div/>\r\n            </div>\r\n        </div>\r\n    )\r\n})","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loadingWrapper\":\"Loader_loadingWrapper__33q2W\",\"loading\":\"Loader_loading__2Z_4D\"};","import {DialogsActionsType} from '../redux/actions/dialogs-actions'\r\nimport {ProfileActionsType} from '../redux/actions/profile-actions'\r\nimport {UsersActionsType} from '../redux/actions/users-actions'\r\nimport {AuthActionsType} from '../redux/actions/auth-actions'\r\nimport {rootReducer} from '../redux/reducers/root-reducer'\r\nimport {ThunkAction} from 'redux-thunk'\r\nimport {AppActionsType} from '../redux/actions/app-actions'\r\n\r\n// Routes\r\nexport enum PATH {\r\n    ROOT = '/',\r\n    PROFILE = '/profile',\r\n    PROFILE_WITH_ID = '/profile/:userId?',\r\n    DIALOGS = '/dialogs',\r\n    USERS = '/users',\r\n    LOGIN = '/login',\r\n    ERROR = ''\r\n}\r\n\r\n// State\r\nexport type StateType = ReturnType<typeof rootReducer>\r\n\r\n// Actions\r\nexport type ActionsType =\r\n    | UsersActionsType\r\n    | ProfileActionsType\r\n    | DialogsActionsType\r\n    | AuthActionsType\r\n    | AppActionsType\r\n\r\n// Thunk\r\nexport type ThunkType<ReturnType = void> = ThunkAction<ReturnType, StateType, unknown, ActionsType>","export enum DIALOGS_ACTIONS_TYPES {\r\n    SEND_MESSAGE = 'SEND_MESSAGE',\r\n}\r\n\r\nexport type DialogsActionsType =\r\n    | ReturnType<typeof sendMessage>\r\n\r\n// Actions\r\nexport const sendMessage = (text: string) => ({\r\n    type: DIALOGS_ACTIONS_TYPES.SEND_MESSAGE,\r\n    payload: {text}\r\n} as const)"],"sourceRoot":""}