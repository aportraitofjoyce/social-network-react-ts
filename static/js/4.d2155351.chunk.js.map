{"version":3,"sources":["pages/Profile/MyProfile/MyProfile.module.css","components/UI/Form/FormTextarea/FormTextarea.tsx","pages/Profile/Profile.module.css","pages/Profile/MyProfile/MyAvatar/MyAvatar.tsx","pages/Profile/MyProfile/MyInfo/MyStatus/MyStatus.tsx","pages/Profile/MyProfile/MyInfo/MyDescription/MyContacts/MyContacts.tsx","pages/Profile/MyProfile/MyInfo/MyDescription/MyDescription.tsx","pages/Profile/MyProfile/MyInfo/MyDescriptionEditForm/MyDescriptionEditForm.tsx","pages/Profile/MyProfile/MyInfo/MyInfo.tsx","pages/Profile/MyProfile/MyProfile.tsx","pages/Profile/Profile.tsx"],"names":["module","exports","FormTextarea","memo","props","useField","field","meta","className","s","formField","multiline","maxRows","error","touched","errorMessage","MyAvatar","src","alt","isOwner","dispatch","useDispatch","Input","styled","display","updateUserAvatarHandler","useCallback","avatarFile","updateUserAvatar","avatarContainer","htmlFor","accept","id","multiple","type","onChange","e","currentTarget","files","value","Button","variant","component","MyStatus","status","useState","editMode","setEditMode","title","setTitle","updateUserStatusHandler","updateUserStatus","onEditMode","offEditMode","onChangeHandler","onKeyPressHandler","key","useEffect","TextField","onBlur","onKeyPress","autoFocus","onDoubleClick","MyContacts","React","contactItem","href","target","rel","MyDescription","userProfile","mappedContacts","Object","keys","contacts","map","contact","descriptionContainer","descriptionItem","aboutMe","lookingForAJob","lookingForAJobDescription","onClick","MyDescriptionEditForm","onSubmit","URLValidation","Yup","matches","contactsValidation","reduce","acc","initialValues","fullName","validationSchema","max","values","FormInput","label","name","FormCheckbox","MyInfo","userStatus","updateUserDescriptionHandler","userDescription","updateUserDescription","a","infoContainer","MyProfile","avatarSRC","photos","large","wrapper","Profile","useAppSelector","state","profile","auth","isAuth","userId","useParams","userID","Number","getUserProfile","getUserStatus","to","PATH","LOGIN"],"mappings":"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","file":"static/js/4.d2155351.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"MyProfile_wrapper__3F7Lc\",\"avatarContainer\":\"MyProfile_avatarContainer__2rN0n\",\"infoContainer\":\"MyProfile_infoContainer__1jIEh\",\"descriptionContainer\":\"MyProfile_descriptionContainer__F3RPh\",\"descriptionItem\":\"MyProfile_descriptionItem__3LVEx\",\"contactItem\":\"MyProfile_contactItem__2E3hd\"};","import React, {FC, memo} from 'react'\r\nimport {useField} from 'formik'\r\nimport s from '../Form.module.css'\r\nimport {TextField} from '@mui/material'\r\n\r\ntype FormTextareaProps = {\r\n    label?: string\r\n    name: string\r\n    placeholder?: string\r\n    id?: string\r\n}\r\n\r\nexport const FormTextarea: FC<FormTextareaProps> = memo(({...props}) => {\r\n    const [field, meta] = useField(props)\r\n\r\n    return (\r\n        <div className={s.formField}>\r\n            <TextField {...field} {...props} multiline maxRows={4} error={!!meta.error}/>\r\n            {meta.touched && meta.error && <div className={s.errorMessage}>{meta.error}</div>}\r\n        </div>\r\n    )\r\n})","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Profile_wrapper__1c_I8\"};","import React, {ChangeEvent, FC, memo, useCallback} from 'react'\r\nimport s from '../MyProfile.module.css'\r\nimport {Button, styled} from '@mui/material'\r\nimport {updateUserAvatar} from '../../../../redux/reducers/profile-reducer'\r\nimport {useDispatch} from 'react-redux'\r\n\r\ntype MyAvatarProps = {\r\n    src: string\r\n    alt: string\r\n    isOwner: boolean\r\n}\r\n\r\nexport const MyAvatar: FC<MyAvatarProps> = memo(({src, alt, isOwner}) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const Input = styled('input')({\r\n        display: 'none',\r\n    })\r\n\r\n    const updateUserAvatarHandler = useCallback((avatarFile: File) =>\r\n        dispatch(updateUserAvatar(avatarFile)), [dispatch])\r\n\r\n    const changeAvatarHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        e.currentTarget.files && updateUserAvatarHandler(e.currentTarget.files[0])\r\n        e.currentTarget.value = ''\r\n    }\r\n\r\n    return (\r\n        <div className={s.avatarContainer}>\r\n            <img src={src} alt={alt}/>\r\n            {isOwner && <label htmlFor='uploadProfileAvatarBtn'>\r\n\t\t\t\t<Input accept='image/*'\r\n\t\t\t\t       id='uploadProfileAvatarBtn'\r\n\t\t\t\t       multiple\r\n\t\t\t\t       type='file'\r\n\t\t\t\t       onChange={changeAvatarHandler}/>\r\n\t\t\t\t<Button variant='outlined' component='span'>Upload</Button>\r\n\t\t\t</label>}\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, FC, KeyboardEvent, memo, useCallback, useEffect, useState} from 'react'\r\nimport {TextField} from '@mui/material'\r\nimport {updateUserStatus} from '../../../../../redux/reducers/profile-reducer'\r\nimport {useDispatch} from 'react-redux'\r\n\r\ntype MyStatusProps = {\r\n    status: string\r\n    isOwner: boolean\r\n}\r\n\r\nexport const MyStatus: FC<MyStatusProps> = memo(({status, isOwner}) => {\r\n    const dispatch = useDispatch()\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(status)\r\n\r\n    const updateUserStatusHandler = useCallback((status: string) => dispatch(updateUserStatus(status)), [dispatch])\r\n\r\n    const onEditMode = useCallback(() => setEditMode(true), [])\r\n\r\n    const offEditMode = useCallback(() => {\r\n        updateUserStatusHandler(title)\r\n        setEditMode(false)\r\n    }, [title, updateUserStatus])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }, [])\r\n\r\n    const onKeyPressHandler = useCallback((e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') offEditMode()\r\n    }, [offEditMode])\r\n\r\n    useEffect(() => setTitle(status), [status])\r\n\r\n    return (\r\n        isOwner && editMode\r\n        ? <TextField type='text'\r\n                     onBlur={offEditMode}\r\n                     onChange={onChangeHandler}\r\n                     onKeyPress={onKeyPressHandler}\r\n                     autoFocus\r\n                     value={title}/>\r\n        : <h4 onDoubleClick={onEditMode}>{status || 'Место для статуса'}</h4>\r\n    )\r\n})","import React from 'react'\r\nimport s from '../../../MyProfile.module.css'\r\n\r\ntype MyInfoContactsPropsType = {\r\n    title: string\r\n    value: string\r\n}\r\nexport const MyContacts: React.FC<MyInfoContactsPropsType> = React.memo(props => {\r\n    const {title, value} = props\r\n\r\n    return (\r\n        <div className={s.contactItem}>\r\n            {value &&\r\n\t\t\t<>\r\n\t\t\t\t<span>{title}</span>\r\n\t\t\t\t<span><a href={`${value}`} target='_blank' rel='noreferrer'>{value}</a></span>\r\n\t\t\t</>}\r\n        </div>\r\n    )\r\n})","import React, {FC, memo} from 'react'\r\nimport s from '../../MyProfile.module.css'\r\nimport {MyContacts} from './MyContacts/MyContacts'\r\nimport {Button} from '@mui/material'\r\nimport {UserProfileContactsType, UserProfileType} from '../../../../../redux/reducers/profile-reducer'\r\n\r\ntype MyProfileDescriptionProps = {\r\n    userProfile: UserProfileType\r\n    isOwner: boolean\r\n    onEditMode: () => void\r\n}\r\n\r\nexport const MyDescription: FC<MyProfileDescriptionProps> = memo(({userProfile, isOwner, onEditMode}) => {\r\n    const mappedContacts = Object.keys(userProfile.contacts)\r\n        .map(contact => <MyContacts key={contact}\r\n                                    title={contact}\r\n                                    value={userProfile.contacts[contact as keyof UserProfileContactsType]}/>)\r\n\r\n    return (\r\n        <div className={s.descriptionContainer}>\r\n            <div className={s.descriptionItem}>\r\n                <strong>About me:</strong>\r\n                {userProfile.aboutMe || 'Empty'}\r\n            </div>\r\n\r\n            <div className={s.descriptionItem}>\r\n                <strong>Looking for a job:</strong>\r\n                {userProfile.lookingForAJob ? 'Yes' : 'No'}\r\n            </div>\r\n\r\n            <div className={s.descriptionItem}>\r\n                <strong>Looking for a job description:</strong>\r\n                {userProfile.lookingForAJobDescription || 'Empty'}\r\n            </div>\r\n\r\n            <div className={s.descriptionItem}>\r\n                <strong>Contacts</strong>\r\n                {mappedContacts}\r\n            </div>\r\n\r\n            {isOwner && <Button onClick={onEditMode} variant='contained'>Edit</Button>}\r\n        </div>\r\n    )\r\n})","import React, {FC, memo} from 'react'\r\nimport {Form, Formik} from 'formik'\r\nimport {FormInput} from '../../../../../components/UI/Form/FormInput/FormInput'\r\nimport {FormCheckbox} from '../../../../../components/UI/Form/FormCheckbox/FormCheckbox'\r\nimport {FormTextarea} from '../../../../../components/UI/Form/FormTextarea/FormTextarea'\r\nimport * as Yup from 'yup'\r\nimport {Button} from '@mui/material'\r\nimport {UserProfileType} from '../../../../../redux/reducers/profile-reducer'\r\n\r\ntype MyDescriptionEditFormProps = {\r\n    onSubmit: (userDescription: any) => void\r\n    userProfile: UserProfileType\r\n}\r\n\r\nexport const MyDescriptionEditForm: FC<MyDescriptionEditFormProps> = memo(props => {\r\n    const {onSubmit, userProfile} = props\r\n\r\n    const URLValidation = Yup.string()\r\n        .matches(/((https?):\\/\\/)?(www.)?[a-z0-9]+(\\.[a-z]{2,}){1,3}(#?\\/?[a-zA-Z0-9#]+)*\\/?(\\?[a-zA-Z0-9-_]+=[a-zA-Z0-9-%]+&?)?$/,\r\n            'Enter correct url!')\r\n\r\n    const contactsValidation = Object\r\n        .keys(userProfile.contacts)\r\n        .reduce((acc: any, value) => (acc[value] = URLValidation, acc), {})\r\n\r\n    return <Formik\r\n        initialValues={{\r\n            fullName: userProfile.fullName,\r\n            aboutMe: userProfile.aboutMe,\r\n            lookingForAJob: userProfile.lookingForAJob,\r\n            lookingForAJobDescription: userProfile.lookingForAJobDescription,\r\n            contacts: userProfile.contacts\r\n        }}\r\n\r\n        validationSchema={Yup.object({\r\n            fullName: Yup.string()\r\n                .max(50, 'Must be 50 characters or less'),\r\n            aboutMe: Yup.string()\r\n                .max(300, 'Must be 300 characters or less'),\r\n            lookingForAJobDescription: Yup.string()\r\n                .max(300, 'Must be 300 characters or less'),\r\n            contacts: Yup.object(contactsValidation)\r\n        })}\r\n\r\n        onSubmit={(values) => {\r\n            onSubmit(values)\r\n        }}>\r\n\r\n        {() => <Form className={'formikFormContainer'}>\r\n            <h4>Main info</h4>\r\n\r\n            <FormInput label='Full Name' name='fullName' type='text'/>\r\n\r\n            <FormTextarea label={'About'} name={'aboutMe'}/>\r\n\r\n            <FormCheckbox name='lookingForAJob' label={'Looking For A Job'}/>\r\n\r\n            <FormTextarea label={'Looking For A Job Description'} name={'lookingForAJobDescription'}/>\r\n\r\n            <h4>Contacts</h4>\r\n            {Object\r\n                .keys(userProfile.contacts)\r\n                .map(contact => <FormInput key={contact}\r\n                                           label={`${contact}`}\r\n                                           name={`contacts.${contact}`}\r\n                                           type='text'/>)}\r\n\r\n            <Button type='submit' variant={'contained'}>Save</Button>\r\n        </Form>}\r\n    </Formik>\r\n})","import s from '../MyProfile.module.css'\r\nimport React, {FC, memo, useCallback, useState} from 'react'\r\nimport {MyStatus} from './MyStatus/MyStatus'\r\nimport {MyDescription} from './MyDescription/MyDescription'\r\nimport {MyDescriptionEditForm} from './MyDescriptionEditForm/MyDescriptionEditForm'\r\nimport {updateUserDescription, UserProfileType} from '../../../../redux/reducers/profile-reducer'\r\nimport {useDispatch} from 'react-redux'\r\n\r\ntype MyInfoProps = {\r\n    userProfile: UserProfileType\r\n    userStatus: string\r\n    isOwner: boolean\r\n}\r\n\r\nexport const MyInfo: FC<MyInfoProps> = memo(({userProfile, userStatus, isOwner}) => {\r\n    const dispatch = useDispatch()\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const updateUserDescriptionHandler = useCallback((userDescription: UserProfileType) =>\r\n        dispatch(updateUserDescription(userDescription)), [dispatch])\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n\r\n    const offEditMode = async (userDescription: UserProfileType) => {\r\n        await updateUserDescriptionHandler(userDescription)\r\n        setEditMode(false)\r\n    }\r\n\r\n    return (\r\n        <div className={s.infoContainer}>\r\n            <h2>{userProfile.fullName}</h2>\r\n\r\n            <MyStatus status={userStatus} isOwner={isOwner}/>\r\n\r\n            {!editMode\r\n                ? <MyDescription userProfile={userProfile}\r\n                                 isOwner={isOwner}\r\n                                 onEditMode={onEditMode}/>\r\n\r\n                : <MyDescriptionEditForm onSubmit={offEditMode}\r\n                                         userProfile={userProfile}/>}\r\n        </div>\r\n    )\r\n})","import React, {FC, memo} from 'react'\r\nimport s from './MyProfile.module.css'\r\nimport {MyAvatar} from './MyAvatar/MyAvatar'\r\nimport {MyInfo} from './MyInfo/MyInfo'\r\nimport {UserProfileType} from '../../../redux/reducers/profile-reducer'\r\n\r\ntype MyProfileProps = {\r\n    userProfile: UserProfileType\r\n    userStatus: string\r\n    isOwner: boolean\r\n}\r\n\r\nexport const MyProfile: FC<MyProfileProps> = memo(({userProfile, userStatus, isOwner}) => {\r\n    const avatarSRC = userProfile.photos.large || 'https://pbs.twimg.com/profile_images/1368235617243426820/L0m5gTDB.jpg'\r\n\r\n    return (\r\n        <section className={s.wrapper}>\r\n            <MyAvatar src={avatarSRC}\r\n                      alt={userProfile.fullName}\r\n                      isOwner={isOwner}/>\r\n\r\n            <MyInfo userProfile={userProfile}\r\n                    userStatus={userStatus}\r\n                    isOwner={isOwner}/>\r\n        </section>\r\n    )\r\n})","import React, {FC, memo, useEffect} from 'react'\r\nimport s from './Profile.module.css'\r\nimport {MyProfile} from './MyProfile/MyProfile'\r\nimport {getUserProfile, getUserStatus} from '../../redux/reducers/profile-reducer'\r\nimport {useAppSelector} from '../../hooks/hooks'\r\nimport {useDispatch} from 'react-redux'\r\nimport {Redirect, useParams} from 'react-router-dom'\r\nimport {PATH} from '../../routes/routes'\r\n\r\nconst Profile: FC = memo(() => {\r\n    const dispatch = useDispatch()\r\n    const {userProfile, userStatus} = useAppSelector(state => state.profile)\r\n    const {id, isAuth} = useAppSelector(state => state.auth)\r\n    const {userId} = useParams<{ userId: string }>()\r\n\r\n    useEffect(() => {\r\n        if (!isAuth) return\r\n\r\n        const userID: number | null = Number(userId) || id\r\n\r\n        dispatch(getUserProfile(userID))\r\n        dispatch(getUserStatus(userID))\r\n    }, [dispatch, userId, id])\r\n\r\n    const isOwner = !userId || (id !== null && id === Number(userId))\r\n\r\n    if (!isAuth) return <Redirect to={PATH.LOGIN}/>\r\n\r\n    return (\r\n        <main className={s.wrapper}>\r\n            {userProfile && <MyProfile userProfile={userProfile}\r\n\t\t\t                           userStatus={userStatus}\r\n\t\t\t                           isOwner={isOwner}/>}\r\n        </main>\r\n    )\r\n})\r\n\r\nexport default Profile"],"sourceRoot":""}