{"version":3,"sources":["components/Content/Profile/MyProfile/MyProfile.module.css","hoc/withAuthRedirect.tsx","components/UI/Form/FormTextarea/FormTextarea.tsx","components/UI/Form/SingleTextareaForm/SingleTextareaForm.tsx","components/Content/Profile/MyPosts/MyPosts.module.css","components/Content/Profile/Profile.module.css","components/Content/Profile/MyPosts/Post/Post.module.css","components/Content/Profile/MyPosts/Post/Post.tsx","components/Content/Profile/MyPosts/PostForm/PostForm.tsx","components/Content/Profile/MyPosts/MyPosts.tsx","components/Content/Profile/MyProfile/MyAvatar/MyAvatar.tsx","components/Content/Profile/MyProfile/MyInfo/MyStatus/MyStatus.tsx","components/Content/Profile/MyProfile/MyInfo/MyInfo.tsx","components/Content/Profile/MyProfile/MyProfile.tsx","components/Content/Profile/Profile.tsx","components/Content/Profile/ProfileContainer.tsx"],"names":["module","exports","withAuthRedirect","Component","props","useSelector","state","auth","isAuth","to","PATH","LOGIN","FormTextarea","React","memo","label","useField","field","meta","className","s","formField","htmlFor","id","name","error","errorBorder","touched","errorMessage","SingleTextareaForm","onSubmit","initialValues","textarea","validationSchema","Yup","required","values","a","setSubmitting","resetForm","isSubmitting","placeholder","type","disabled","Post","wrapper","avatar_container","src","alt","content_container","text","likes","PostsForm","control_wrapper","MyPosts","addPost","dataForMyPosts","mappedPosts","useMemo","map","item","v1","MyAvatar","avatarWrapper","MyStatus","status","updateUserStatus","useState","editMode","setEditMode","title","setTitle","useEffect","onEditMode","useCallback","offEditMode","onChangeHandler","e","currentTarget","value","onKeyPressHandler","key","onBlur","onChange","onKeyPress","autoFocus","onDoubleClick","MyInfo","userStatus","infoWrapper","style","marginBottom","MyProfile","dataForProfile","avatarSRC","photos","large","fullName","Profile","userProfile","authID","userId","ProfileContainer","match","dispatch","useDispatch","profile","addPostHandler","updateUserStatusHandler","userID","Number","params","getUserProfile","getUserStatus","compose","withRouter"],"mappings":"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","file":"static/js/3.86c73892.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"MyProfile_wrapper__cp4Sk\",\"avatarWrapper\":\"MyProfile_avatarWrapper__2OxHC\",\"infoWrapper\":\"MyProfile_infoWrapper__1ttQf\"};","import React, {ComponentType} from 'react'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {PATH, StateType} from '../types/common-types'\r\nimport {useSelector} from 'react-redux'\r\n\r\ntype AuthRedirectPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nexport const withAuthRedirect = <T extends AuthRedirectPropsType>(Component: ComponentType<T>) => {\r\n\r\n    const AuthRedirect: React.FC<AuthRedirectPropsType & T> = props => {\r\n\r\n        const isAuth = useSelector<StateType>(state => state.auth.isAuth)\r\n        if (!isAuth) return <Redirect to={PATH.LOGIN}/>\r\n\r\n        return <Component {...props}/>\r\n    }\r\n\r\n    return AuthRedirect\r\n}","import React from 'react'\r\nimport {useField} from 'formik'\r\nimport s from '../Form.module.css'\r\n\r\ntype FormTextareaPropsType = {\r\n    label?: string\r\n    name: string\r\n    placeholder: string\r\n    id?: string\r\n}\r\n\r\nexport const FormTextarea: React.FC<FormTextareaPropsType> = React.memo(({label, ...props}) => {\r\n    const [field, meta] = useField(props)\r\n    return (\r\n        <div className={s.formField}>\r\n\r\n            <label htmlFor={props.id || props.name}>{label}</label>\r\n\r\n            <textarea {...field} {...props} className={meta.error ? s.errorBorder : ''}/>\r\n\r\n            {meta.touched && meta.error && <div className={s.errorMessage}>{meta.error}</div>}\r\n        </div>\r\n    )\r\n})","import React from 'react'\r\nimport * as Yup from 'yup'\r\nimport {Form, Formik} from 'formik'\r\nimport {FormTextarea} from '../FormTextarea/FormTextarea'\r\n\r\ntype SingleTextareaFormPropsType = {\r\n    onSubmit: (text: string) => void\r\n}\r\n\r\nexport const SingleTextareaForm: React.FC<SingleTextareaFormPropsType> = React.memo(props => {\r\n    const {onSubmit} = props\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{textarea: ''}}\r\n\r\n            validationSchema={Yup.object({\r\n                textarea: Yup.string()\r\n                    .required('Required'),\r\n            })}\r\n\r\n            onSubmit={async (values, {setSubmitting, resetForm}) => {\r\n                await setSubmitting(true)\r\n                await resetForm()\r\n                await onSubmit(values.textarea)\r\n            }}>\r\n\r\n            {({isSubmitting}) => <Form>\r\n                <FormTextarea name='textarea'\r\n                              placeholder='Type your message...'/>\r\n                <button type={'submit'} disabled={isSubmitting}>Send</button>\r\n            </Form>}\r\n        </Formik>\r\n    )\r\n})","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"MyPosts_wrapper__15TKy\",\"control_wrapper\":\"MyPosts_control_wrapper__2ZGHX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Profile_wrapper__2B6mU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Post_wrapper__3ZTzx\",\"avatar_container\":\"Post_avatar_container__4fRhO\",\"content_container\":\"Post_content_container__3MGXq\"};","import React from \"react\";\r\nimport s from './Post.module.css'\r\n\r\ntype PostPropsType = {\r\n    src: string\r\n    alt: string\r\n    text: string\r\n    likes: number\r\n}\r\n\r\nexport const Post: React.FC<PostPropsType> = React.memo(props => {\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <div className={s.avatar_container}>\r\n                <img src={props.src} alt={props.alt}/>\r\n            </div>\r\n\r\n            <div className={s.content_container}>\r\n                <div>{props.text}</div>\r\n                <div>Likes: {props.likes}</div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n})","import s from '../MyPosts.module.css'\r\nimport React from 'react'\r\nimport {SingleTextareaForm} from '../../../../UI/Form/SingleTextareaForm/SingleTextareaForm'\r\n\r\ntype PostControlPropsType = {\r\n    onSubmit: (text: string) => void\r\n}\r\n\r\nexport const PostsForm: React.FC<PostControlPropsType> = React.memo(props => {\r\n    const {onSubmit} = props\r\n\r\n    return (\r\n        <div className={s.control_wrapper}>\r\n            <SingleTextareaForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n})","import React, {useMemo} from 'react'\r\nimport s from './MyPosts.module.css'\r\nimport {Post} from './Post/Post'\r\nimport {v1} from 'uuid'\r\nimport {PostsForm} from './PostForm/PostForm'\r\nimport {dataForMyPostsType} from '../../../../types/profile-types'\r\n\r\ntype MyPostsPropsType = {\r\n    addPost: (text: string) => void\r\n    dataForMyPosts: dataForMyPostsType[]\r\n}\r\n\r\nexport const MyPosts: React.FC<MyPostsPropsType> = React.memo(props => {\r\n    const {addPost, dataForMyPosts} = props\r\n\r\n    const mappedPosts = useMemo(() => dataForMyPosts.map(item => <Post key={v1()}\r\n                                                                       text={item.text}\r\n                                                                       src={item.src}\r\n                                                                       alt={item.alt}\r\n                                                                       likes={item.likes}/>), [dataForMyPosts])\r\n    return (\r\n        <section className={s.wrapper}>\r\n            <PostsForm onSubmit={addPost}/>\r\n            {mappedPosts}\r\n\r\n        </section>\r\n    )\r\n})","import s from '../MyProfile.module.css'\r\nimport React from 'react'\r\n\r\ntype MyAvatarPropsType = {\r\n    src: string\r\n    alt: string\r\n}\r\n\r\nexport const MyAvatar: React.FC<MyAvatarPropsType> = React.memo(props => {\r\n    const {src, alt} = props\r\n\r\n    return (\r\n        <div className={s.avatarWrapper}>\r\n            <img\r\n                src={src}\r\n                alt={alt}/>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, useCallback, useEffect, useState} from 'react'\r\n\r\ntype MyStatusPropsType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nexport const MyStatus: React.FC<MyStatusPropsType> = React.memo(props => {\r\n    const {status, updateUserStatus} = props\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.status)\r\n\r\n    useEffect(() => setTitle(status), [status])\r\n\r\n    const onEditMode = useCallback(() => setEditMode(true), [])\r\n\r\n    const offEditMode = useCallback(() => {\r\n        updateUserStatus(title)\r\n        setEditMode(false)\r\n    }, [title, updateUserStatus])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }, [])\r\n\r\n    const onKeyPressHandler = useCallback((e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') offEditMode()\r\n    }, [offEditMode])\r\n\r\n    return (\r\n        editMode\r\n            ? <input type='text'\r\n                     onBlur={offEditMode}\r\n                     onChange={onChangeHandler}\r\n                     onKeyPress={onKeyPressHandler}\r\n                     autoFocus\r\n                     value={title}/>\r\n\r\n            : <h4 onDoubleClick={onEditMode}>\r\n                {status || 'Место для статуса'}\r\n            </h4>\r\n    )\r\n})","import s from '../MyProfile.module.css'\r\nimport React from 'react'\r\nimport {MyStatus} from './MyStatus/MyStatus'\r\n\r\ntype MyInfoPropsType = {\r\n    title: string\r\n    userStatus: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nexport const MyInfo: React.FC<MyInfoPropsType> = React.memo(props => {\r\n    const {title, userStatus, updateUserStatus} = props\r\n\r\n    return (\r\n        <div className={s.infoWrapper}>\r\n            <h2 style={{marginBottom: 24}}>{title}</h2>\r\n            <MyStatus status={userStatus}\r\n                      updateUserStatus={updateUserStatus}/>\r\n        </div>\r\n    )\r\n})","import React, {useMemo} from 'react'\r\nimport s from './MyProfile.module.css'\r\nimport {MyAvatar} from './MyAvatar/MyAvatar'\r\nimport {MyInfo} from './MyInfo/MyInfo'\r\nimport {UserProfileType} from '../../../../types/profile-types'\r\n\r\ntype MyProfilePropsType = {\r\n    dataForProfile: UserProfileType\r\n    userStatus: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nexport const MyProfile: React.FC<MyProfilePropsType> = React.memo(props => {\r\n    const {dataForProfile, userStatus, updateUserStatus} = props\r\n\r\n    const avatarSRC = useMemo(() => dataForProfile.photos.large !== null\r\n        ? dataForProfile.photos.large\r\n        : 'https://pbs.twimg.com/profile_images/1368235617243426820/L0m5gTDB.jpg', [dataForProfile.photos.large])\r\n\r\n    return (\r\n        <section className={s.wrapper}>\r\n            <MyAvatar\r\n                src={avatarSRC}\r\n                alt={dataForProfile.fullName}/>\r\n\r\n            <MyInfo title={dataForProfile.fullName}\r\n                    userStatus={userStatus}\r\n                    updateUserStatus={updateUserStatus}/>\r\n        </section>\r\n    )\r\n})","import React from 'react'\r\nimport s from './Profile.module.css'\r\nimport {MyPosts} from './MyPosts/MyPosts'\r\nimport {MyProfile} from './MyProfile/MyProfile'\r\nimport {dataForMyPostsType, UserProfileType} from '../../../types/profile-types'\r\n\r\ntype ProfilePropsType = {\r\n    dataForMyPosts: dataForMyPostsType[]\r\n    userProfile: UserProfileType | null\r\n    userStatus: string\r\n    authID: number | null\r\n    addPost: (text: string) => void\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nexport const Profile: React.FC<ProfilePropsType> = React.memo(props => {\r\n    const {dataForMyPosts, userProfile, userStatus, authID, addPost, updateUserStatus} = props\r\n\r\n    return (\r\n        <main className={s.wrapper}>\r\n            {userProfile && <MyProfile dataForProfile={userProfile}\r\n                                       userStatus={userStatus}\r\n                                       updateUserStatus={updateUserStatus}/>}\r\n\r\n            {userProfile && userProfile.userId === authID ?\r\n                <MyPosts dataForMyPosts={dataForMyPosts} addPost={addPost}/> : ''}\r\n        </main>\r\n    )\r\n})","import React, {ComponentType, useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {Profile} from './Profile'\r\nimport {StateType} from '../../../types/common-types'\r\nimport {\r\n    addPost,\r\n    getUserProfile,\r\n    getUserStatus,\r\n    updateUserStatus\r\n} from '../../../redux/actions/profile-actions'\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom'\r\nimport {ProfileType} from '../../../types/profile-types'\r\nimport {compose} from 'redux'\r\nimport {withAuthRedirect} from '../../../hoc/withAuthRedirect'\r\nimport {AuthType} from '../../../types/auth-types'\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\nconst ProfileContainer: React.FC<RouteComponentProps<PathParamsType>> = React.memo(props => {\r\n    const {match} = props\r\n\r\n    const dispatch = useDispatch()\r\n    const {dataForMyPosts, userProfile, userStatus} = useSelector<StateType, ProfileType>(state => state.profile)\r\n    const {id} = useSelector<StateType, AuthType>(state => state.auth)\r\n\r\n    const addPostHandler = useCallback((text: string) => dispatch(addPost(text)), [dispatch])\r\n    const updateUserStatusHandler = useCallback((status: string) => dispatch(updateUserStatus(status)), [dispatch])\r\n\r\n    useEffect(() => {\r\n        let userID = Number(match.params.userId) || id\r\n        dispatch(getUserProfile(userID))\r\n        dispatch(getUserStatus(userID))\r\n    }, [dispatch, match.params.userId, id])\r\n\r\n    return <Profile dataForMyPosts={dataForMyPosts}\r\n                    userProfile={userProfile}\r\n                    userStatus={userStatus}\r\n                    authID={id}\r\n                    updateUserStatus={updateUserStatusHandler}\r\n                    addPost={addPostHandler}/>\r\n})\r\n\r\nexport default compose<ComponentType>(withAuthRedirect, withRouter)(ProfileContainer)"],"sourceRoot":""}