{"version":3,"sources":["pages/Users/Users.module.css","pages/Users/User/User.tsx","components/UI/Form/FormSelect/FormSelect.tsx","pages/Users/UsersSearchForm/UsersSearchForm.tsx","components/UI/Pagination/PaginationControlled.tsx","pages/Users/Users.tsx"],"names":["module","exports","User","memo","user","followLoader","isAuth","dispatch","useDispatch","onFollowButtonClickHandler","useCallback","followUser","id","followed","className","s","userContainer","avatarAndFollowContainer","to","PATH","PROFILE","avatar","src","photos","large","alt","name","Button","onClick","disabled","includes","variant","userInfoContainer","status","FormSelect","label","options","props","useField","field","meta","mappedOptions","map","i","MenuItem","value","formField","FormControl","fullWidth","InputLabel","Select","labelId","touched","error","UsersSearchForm","onSubmit","searchParams","optionsForSelect","enableReinitialize","initialValues","term","followers","String","values","selectConverter","FormInput","type","PaginationControlled","pagesCount","currentPage","Stack","spacing","Pagination","count","page","onChange","e","Users","history","useHistory","useAppSelector","state","users","usersData","pageSize","totalUsersCount","isLoading","search","auth","useMemo","Math","ceil","searchUsersHandler","requestUsers","changeCurrentPageHandler","changeCurrentPage","useEffect","parsedURLParams","queryString","parse","location","substr","actualPage","actualSearchParams","Number","friend","queryURL","push","pathname","USERS","stringify","wrapper","Loader"],"mappings":"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","file":"static/js/5.090fc6f6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Users_wrapper__2cJTt\",\"userContainer\":\"Users_userContainer__2ixRo\",\"avatarAndFollowContainer\":\"Users_avatarAndFollowContainer__1aTsv\",\"avatar\":\"Users_avatar__1bjWe\",\"userInfoContainer\":\"Users_userInfoContainer__3vZCi\",\"name\":\"Users_name__1eEoV\"};","import React, {FC, memo, useCallback} from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport s from '../Users.module.css'\r\nimport {Button} from '@mui/material'\r\nimport {PATH} from '../../../routes/routes'\r\nimport {followUser, UserType} from '../../../redux/reducers/users-reducer'\r\nimport {useDispatch} from 'react-redux'\r\n\r\ntype UserProps = {\r\n    user: UserType\r\n    followLoader: number[]\r\n    isAuth: boolean\r\n}\r\n\r\nexport const User: FC<UserProps> = memo(({user, followLoader, isAuth}) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const onFollowButtonClickHandler =\r\n        useCallback(() => dispatch(followUser(user.id, user.followed)), [user.id, user.followed])\r\n\r\n    return (\r\n        <div className={s.userContainer}>\r\n            <div className={s.avatarAndFollowContainer}>\r\n                <Link to={`${PATH.PROFILE}/${user.id}`}>\r\n                    <div className={s.avatar}>\r\n                        <img\r\n                            src={user.photos.large || 'https://pbs.twimg.com/profile_images/1368235617243426820/L0m5gTDB.jpg'}\r\n                            alt={user.name}/>\r\n                    </div>\r\n                </Link>\r\n\r\n                {!isAuth\r\n                    ? <Button disabled variant={'outlined'}>\r\n                        Need to login\r\n                    </Button>\r\n                    : <Button onClick={onFollowButtonClickHandler}\r\n                              disabled={followLoader.includes(user.id)}\r\n                              variant={'outlined'}>\r\n                        {user.followed ? 'Unfollow' : 'Follow'}\r\n                    </Button>}\r\n            </div>\r\n\r\n            <div className={s.userInfoContainer}>\r\n                <div className={s.name}>{user.name}</div>\r\n                <div>{user.followed ? 'Вы уже дружите' : 'Ждет дружбы'}</div>\r\n                <div>{user.status || 'Место для вашего статуса'}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React, {FC, memo} from 'react'\r\nimport {useField} from 'formik'\r\nimport s from '../Form.module.css'\r\nimport {FormControl, InputLabel, MenuItem, Select} from '@mui/material'\r\n\r\ntype FormSelectProps = {\r\n    label: string\r\n    name: string\r\n    id?: string\r\n    options: OptionsForSelect[]\r\n}\r\n\r\nexport type OptionsForSelect = {\r\n    value: string\r\n    name: string\r\n}\r\n\r\nexport const FormSelect: FC<FormSelectProps> = memo(({label, options, ...props}) => {\r\n    const [field, meta] = useField(props)\r\n    const mappedOptions = options.map(i => <MenuItem key={i.value} value={i.value}>{i.name}</MenuItem>)\r\n\r\n    return (\r\n        <div className={s.formField}>\r\n            <FormControl fullWidth>\r\n                <InputLabel id={`${label}LabelName`}>{label}</InputLabel>\r\n\r\n                <Select {...field} {...props}\r\n                        labelId={`${label}LabelName`}\r\n                        id={`${label}SelectForm`}\r\n                        label={label}>\r\n                    {mappedOptions}\r\n                </Select>\r\n\r\n                {meta.touched && meta.error && <div className='error'>{meta.error}</div>}\r\n            </FormControl>\r\n\r\n\r\n        </div>\r\n    )\r\n})","import React, {FC, memo} from 'react'\r\nimport {Form, Formik} from 'formik'\r\nimport {FormInput} from '../../../components/UI/Form/FormInput/FormInput'\r\nimport {FormSelect, OptionsForSelect} from '../../../components/UI/Form/FormSelect/FormSelect'\r\nimport {Button} from '@mui/material'\r\nimport {SearchParamsType} from '../../../redux/reducers/users-reducer'\r\n\r\ntype UsersSearchFormProps = {\r\n    onSubmit: (term: string, followers: boolean | null) => void\r\n    searchParams: SearchParamsType\r\n}\r\n\r\nexport const UsersSearchForm: FC<UsersSearchFormProps> = memo(({onSubmit, searchParams}) => {\r\n    const optionsForSelect: OptionsForSelect[] = [\r\n        {value: 'null', name: 'All'},\r\n        {value: 'true', name: 'Followed'},\r\n        {value: 'false', name: 'Unfollowed'}\r\n    ]\r\n\r\n    const selectConverter = (value: string) => {\r\n        switch (value) {\r\n            case 'true':\r\n                return true\r\n            case 'false':\r\n                return false\r\n            default:\r\n                return null\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            enableReinitialize\r\n            initialValues={{\r\n                term: searchParams.term,\r\n                followers: String(searchParams.followers),\r\n            }}\r\n\r\n            onSubmit={(values) => {\r\n                onSubmit(values.term, selectConverter(values.followers))\r\n            }}>\r\n\r\n            {() => <Form className={'formikFormContainer'}>\r\n                <FormInput label='Search by Name' name='term' type='text'/>\r\n\r\n                <FormSelect label={'Followers'} name={'followers'} options={optionsForSelect}/>\r\n\r\n                <Button type='submit' variant={'contained'}>Search</Button>\r\n            </Form>}\r\n        </Formik>\r\n    )\r\n})","import React, {ChangeEvent, FC} from 'react'\r\nimport Pagination from '@mui/material/Pagination'\r\nimport Stack from '@mui/material/Stack'\r\n\r\ntype PaginationProps = {\r\n    pagesCount: number\r\n    currentPage: number\r\n    onClick: (page: number) => void\r\n}\r\n\r\nexport const PaginationControlled: FC<PaginationProps> = props => {\r\n    const {pagesCount, currentPage, onClick} = props\r\n\r\n    const handleChange = (e: ChangeEvent<unknown>, value: number) => {\r\n        onClick(value)\r\n    }\r\n\r\n    return (\r\n        <Stack spacing={2}>\r\n            <Pagination count={pagesCount} page={currentPage} onChange={handleChange}/>\r\n        </Stack>\r\n    )\r\n}","import React, {FC, memo, useCallback, useEffect, useMemo} from 'react'\r\nimport s from './Users.module.css'\r\nimport {User} from './User/User'\r\nimport {UsersSearchForm} from './UsersSearchForm/UsersSearchForm'\r\nimport {PaginationControlled} from '../../components/UI/Pagination/PaginationControlled'\r\nimport {changeCurrentPage, followUser, requestUsers} from '../../redux/reducers/users-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {useHistory} from 'react-router-dom'\r\nimport {useAppSelector} from '../../hooks/hooks'\r\nimport {Loader} from '../../components/UI/Loader/Loader'\r\nimport queryString from 'querystring'\r\nimport {PATH} from '../../routes/routes'\r\n\r\ntype QueryParamsType = { term?: string; page?: string; friend?: string }\r\n\r\nconst Users: FC = memo(() => {\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    const {\r\n        usersData,\r\n        pageSize,\r\n        totalUsersCount,\r\n        currentPage,\r\n        isLoading,\r\n        followLoader,\r\n        search\r\n    } = useAppSelector(state => state.users)\r\n    const isAuth = useAppSelector(state => state.auth.isAuth)\r\n\r\n    let pagesCount = useMemo(() => Math.ceil(totalUsersCount / pageSize), [totalUsersCount, pageSize])\r\n\r\n    const searchUsersHandler = useCallback((term: string, followers: boolean | null) => {\r\n        dispatch(requestUsers(1, pageSize, term, followers))\r\n    }, [dispatch])\r\n\r\n    const changeCurrentPageHandler = useCallback((page: number) => {\r\n        dispatch(changeCurrentPage(page, pageSize, search.term, search.followers))\r\n    }, [dispatch, pageSize, search.term, search.followers])\r\n\r\n    useEffect(() => {\r\n        const parsedURLParams = queryString.parse(history.location.search.substr(1)) as QueryParamsType\r\n\r\n        let actualPage = currentPage\r\n        let actualSearchParams = search\r\n\r\n        if (parsedURLParams.page) actualPage = Number(parsedURLParams.page)\r\n\r\n        if (parsedURLParams.term) actualSearchParams = {\r\n            ...actualSearchParams,\r\n            term: parsedURLParams.term\r\n        }\r\n\r\n        if (parsedURLParams.friend) actualSearchParams = {\r\n            ...actualSearchParams,\r\n            followers: parsedURLParams.friend === 'null' ? null : parsedURLParams.friend === 'true',\r\n        }\r\n\r\n        dispatch(requestUsers(actualPage, pageSize, actualSearchParams.term, actualSearchParams.followers))\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        const queryURL: QueryParamsType = {}\r\n\r\n        if (search.term) queryURL.term = search.term\r\n        if (search.followers !== null) queryURL.friend = String(search.followers)\r\n        if (currentPage) queryURL.page = String(currentPage)\r\n\r\n        history.push({\r\n            pathname: PATH.USERS,\r\n            search: queryString.stringify(queryURL)\r\n        })\r\n    }, [history, search, currentPage])\r\n\r\n    return (\r\n        <main className={s.wrapper}>\r\n            {isLoading && <Loader/>}\r\n\r\n            <UsersSearchForm onSubmit={searchUsersHandler}\r\n                             searchParams={search}/>\r\n\r\n            <PaginationControlled pagesCount={pagesCount}\r\n                                  currentPage={currentPage}\r\n                                  onClick={changeCurrentPageHandler}/>\r\n\r\n            {usersData.map(user => <User key={user.name + user.id}\r\n                                         user={user}\r\n                                         followLoader={followLoader}\r\n                                         isAuth={isAuth}/>)}\r\n        </main>\r\n    )\r\n})\r\n\r\nexport default Users"],"sourceRoot":""}