{"version":3,"sources":["components/Content/Users/Users.module.css","components/Content/Users/User/User.tsx","components/UI/Form/FormSelect/FormSelect.tsx","components/Content/Users/UsersSearchForm/UsersSearchForm.tsx","components/UI/Pagination/PaginationControlled.tsx","components/Content/Users/Users.tsx","components/Content/Users/UsersContainer.tsx"],"names":["module","exports","User","React","memo","props","name","avatar","id","followed","status","followLoader","followUser","isAuth","onFollowButtonClickHandler","useCallback","className","s","userContainer","avatarAndFollowContainer","to","PATH","PROFILE","src","alt","Button","onClick","disabled","includes","variant","userInfoContainer","FormSelect","label","options","useField","field","meta","mappedOptions","map","i","MenuItem","value","formField","FormControl","fullWidth","InputLabel","Select","labelId","touched","error","UsersSearchForm","onSubmit","searchParams","optionsForSelect","enableReinitialize","initialValues","term","followers","String","values","selectConverter","FormInput","type","PaginationControlled","pagesCount","currentPage","Stack","spacing","Pagination","count","page","onChange","e","Users","usersData","pageSize","totalUsersCount","changeCurrentPage","searchUsers","useMemo","Math","ceil","mappedUsers","user","photos","large","wrapper","UsersContainer","dispatch","useDispatch","history","useHistory","useSelector","state","users","isLoading","search","auth","followUserHandler","changeCurrentPageHandler","searchUsersHandler","requestUsers","useEffect","parsedURLParams","queryString","location","substr","actualPage","actualSearchParams","Number","friend","queryURL","push","pathname","USERS","Loader"],"mappings":"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","file":"static/js/6.2c13561c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Users_wrapper__1TdN0\",\"userContainer\":\"Users_userContainer__2BSH3\",\"avatarAndFollowContainer\":\"Users_avatarAndFollowContainer__3nRK5\",\"avatar\":\"Users_avatar__2QNNt\",\"userInfoContainer\":\"Users_userInfoContainer__2ch6q\",\"name\":\"Users_name__30xMK\"};","import React, {useCallback} from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport s from '../Users.module.css'\r\nimport {Button} from '@mui/material'\r\nimport {PATH} from '../../../../routes/routes'\r\n\r\ntype UserPropsType = {\r\n    name: string\r\n    avatar: string\r\n    id: number\r\n    followed: boolean\r\n    status: string\r\n    followLoader: number[]\r\n    followUser: (id: number, followed: boolean) => void\r\n    isAuth: boolean\r\n}\r\n\r\nexport const User: React.FC<UserPropsType> = React.memo(props => {\r\n    const {name, avatar, id, followed, status, followLoader, followUser, isAuth} = props\r\n\r\n    const onFollowButtonClickHandler = useCallback(() => followUser(id, followed), [followUser, id, followed])\r\n\r\n    return (\r\n        <div key={props.name} className={s.userContainer}>\r\n            <div className={s.avatarAndFollowContainer}>\r\n                <Link to={`${PATH.PROFILE}/${id}`}>\r\n                    <div className={s.avatar}>\r\n                        <img src={avatar || 'https://pbs.twimg.com/profile_images/1368235617243426820/L0m5gTDB.jpg'}\r\n                             alt={name}/>\r\n                    </div>\r\n                </Link>\r\n\r\n                {!isAuth\r\n                    ? <Button disabled variant={'outlined'}>\r\n                        Need to login\r\n                    </Button>\r\n\r\n                    : <Button onClick={onFollowButtonClickHandler}\r\n                              disabled={followLoader.includes(id)}\r\n                              variant={'outlined'}>\r\n                        {followed ? 'Unfollow' : 'Follow'}\r\n                    </Button>}\r\n            </div>\r\n\r\n            <div className={s.userInfoContainer}>\r\n                <div className={s.name}>{name}</div>\r\n                <div>{followed ? 'Вы уже дружите' : 'Ждет дружбы'}</div>\r\n                <div>{status || 'Место для вашего статуса'}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React from 'react'\r\nimport {useField} from 'formik'\r\nimport s from '../Form.module.css'\r\nimport {FormControl, InputLabel, MenuItem, Select} from '@mui/material'\r\n\r\ntype FormSelectPropsType = {\r\n    label: string\r\n    name: string\r\n    id?: string\r\n    options: OptionsForSelectType[]\r\n}\r\n\r\nexport type OptionsForSelectType = {\r\n    value: string\r\n    name: string\r\n}\r\n\r\nexport const FormSelect: React.FC<FormSelectPropsType> = React.memo(({label, options, ...props}) => {\r\n    const [field, meta] = useField(props)\r\n    const mappedOptions = options.map(i => <MenuItem key={i.value} value={i.value}>{i.name}</MenuItem>)\r\n\r\n    return (\r\n        <div className={s.formField}>\r\n            <FormControl fullWidth>\r\n                <InputLabel id={`${label}LabelName`}>{label}</InputLabel>\r\n\r\n                <Select {...field} {...props}\r\n                        labelId={`${label}LabelName`}\r\n                        id={`${label}SelectForm`}\r\n                        label={label}>\r\n                    {mappedOptions}\r\n                </Select>\r\n\r\n                {meta.touched && meta.error && <div className='error'>{meta.error}</div>}\r\n            </FormControl>\r\n\r\n\r\n        </div>\r\n    )\r\n})","import React from 'react'\r\nimport {Form, Formik} from 'formik'\r\nimport {FormInput} from '../../../UI/Form/FormInput/FormInput'\r\nimport {FormSelect, OptionsForSelectType} from '../../../UI/Form/FormSelect/FormSelect'\r\nimport {SearchParamsType} from '../../../../types/users-types'\r\nimport {Button} from '@mui/material'\r\n\r\ntype UsersSearchFormPropsType = {\r\n    onSubmit: (term: string, followers: boolean | null) => void\r\n    searchParams: SearchParamsType\r\n}\r\n\r\n\r\n// TODO: Form Submission\r\nexport const UsersSearchForm: React.FC<UsersSearchFormPropsType> = React.memo(props => {\r\n    const {onSubmit, searchParams} = props\r\n\r\n    const optionsForSelect: OptionsForSelectType[] = [\r\n        {value: 'null', name: 'All'},\r\n        {value: 'true', name: 'Followed'},\r\n        {value: 'false', name: 'Unfollowed'}\r\n    ]\r\n\r\n    const selectConverter = (value: string) => {\r\n        switch (value) {\r\n            case 'true':\r\n                return true\r\n            case 'false':\r\n                return false\r\n            default:\r\n                return null\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            enableReinitialize\r\n            initialValues={{\r\n                term: searchParams.term,\r\n                followers: String(searchParams.followers),\r\n            }}\r\n\r\n            onSubmit={(values) => {\r\n                onSubmit(values.term, selectConverter(values.followers))\r\n            }}>\r\n\r\n            {() => <Form className={'formikFormContainer'}>\r\n                <FormInput label='Search by Name' name='term' type='text'/>\r\n\r\n                <FormSelect label={'Followers'} name={'followers'} options={optionsForSelect}/>\r\n\r\n                <Button type='submit' variant={'contained'}>Search</Button>\r\n            </Form>}\r\n        </Formik>\r\n    )\r\n})","import React, {ChangeEvent} from 'react'\r\nimport Pagination from '@mui/material/Pagination'\r\nimport Stack from '@mui/material/Stack'\r\n\r\ntype PaginationPropsType = {\r\n    pagesCount: number\r\n    currentPage: number\r\n    onClick: (page: number) => void\r\n}\r\n\r\nexport const PaginationControlled: React.FC<PaginationPropsType> = props => {\r\n    const {pagesCount, currentPage, onClick} = props\r\n\r\n    const handleChange = (e: ChangeEvent<unknown>, value: number) => {\r\n        onClick(value)\r\n    }\r\n\r\n    return (\r\n        <Stack spacing={2}>\r\n            <Pagination count={pagesCount} page={currentPage} onChange={handleChange}/>\r\n        </Stack>\r\n    )\r\n}","import React, {useEffect, useMemo} from 'react'\r\nimport s from './Users.module.css'\r\nimport {User} from './User/User'\r\nimport {SearchParamsType, UserType} from '../../../types/users-types'\r\nimport {UsersSearchForm} from './UsersSearchForm/UsersSearchForm'\r\nimport {PaginationControlled} from '../../UI/Pagination/PaginationControlled'\r\n\r\ntype UsersPropsType = {\r\n    usersData: UserType[]\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    changeCurrentPage: (page: number) => void\r\n    followLoader: number[]\r\n    followUser: (id: number, followed: boolean) => void\r\n    isAuth: boolean\r\n    searchUsers: (term: string, followers: boolean | null) => void\r\n    searchParams: SearchParamsType\r\n}\r\n\r\nexport const Users: React.FC<UsersPropsType> = React.memo(props => {\r\n    const {\r\n        usersData,\r\n        pageSize,\r\n        totalUsersCount,\r\n        currentPage,\r\n        changeCurrentPage,\r\n        followLoader,\r\n        followUser,\r\n        isAuth,\r\n        searchUsers,\r\n        searchParams\r\n    } = props\r\n\r\n    let pagesCount = useMemo(() => Math.ceil(totalUsersCount / pageSize), [totalUsersCount, pageSize])\r\n\r\n    const mappedUsers = usersData.map(user => <User key={user.name + user.id}\r\n                                                    name={user.name}\r\n                                                    avatar={user.photos.large}\r\n                                                    id={user.id}\r\n                                                    followed={user.followed}\r\n                                                    status={user.status}\r\n                                                    followLoader={followLoader}\r\n                                                    followUser={followUser}\r\n                                                    isAuth={isAuth}/>)\r\n\r\n    return (\r\n        <main className={s.wrapper}>\r\n            <UsersSearchForm onSubmit={searchUsers}\r\n                             searchParams={searchParams}/>\r\n\r\n            <PaginationControlled pagesCount={pagesCount}\r\n                                  currentPage={currentPage}\r\n                                  onClick={changeCurrentPage}/>\r\n            {mappedUsers}\r\n        </main>\r\n    )\r\n})","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {Users} from './Users'\r\nimport {Loader} from '../../UI/Loader/Loader'\r\nimport {UsersType} from '../../../types/users-types'\r\nimport {AuthType} from '../../../types/auth-types'\r\nimport {useHistory} from 'react-router-dom'\r\nimport * as queryString from 'querystring'\r\nimport {PATH} from '../../../routes/routes'\r\nimport {RootState} from '../../../redux/store'\r\nimport {changeCurrentPage, followUser, requestUsers} from '../../../redux/reducers/users-reducer'\r\n\r\ntype QueryParamsType = { term?: string; page?: string; friend?: string }\r\n\r\nconst UsersContainer: React.FC = React.memo(() => {\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    const {\r\n        usersData,\r\n        pageSize,\r\n        totalUsersCount,\r\n        currentPage,\r\n        isLoading,\r\n        followLoader,\r\n        search\r\n    } = useSelector<RootState, UsersType>(state => state.users)\r\n\r\n    const {isAuth} = useSelector<RootState, AuthType>(state => state.auth)\r\n\r\n    const followUserHandler = useCallback((id: number, followed: boolean) => {\r\n        dispatch(followUser(id, followed))\r\n    }, [dispatch])\r\n\r\n    const changeCurrentPageHandler = useCallback((page: number) => {\r\n        dispatch(changeCurrentPage(page, pageSize, search.term, search.followers))\r\n    }, [dispatch, pageSize, search.term, search.followers])\r\n\r\n    const searchUsersHandler = useCallback((term: string, followers: boolean | null) => {\r\n        dispatch(requestUsers(1, pageSize, term, followers))\r\n    }, [dispatch])\r\n\r\n\r\n    // Read query params and set them to store.\r\n    useEffect(() => {\r\n        // Substr(1) needed because lib 'querystring' put ? as first symbol.\r\n        const parsedURLParams = queryString.parse(history.location.search.substr(1)) as QueryParamsType\r\n\r\n        let actualPage = currentPage\r\n        let actualSearchParams = search\r\n\r\n        if (parsedURLParams.page) actualPage = Number(parsedURLParams.page)\r\n\r\n        if (parsedURLParams.term) actualSearchParams = {\r\n            ...actualSearchParams,\r\n            term: parsedURLParams.term\r\n        }\r\n\r\n        if (parsedURLParams.friend) actualSearchParams = {\r\n            ...actualSearchParams,\r\n            followers: parsedURLParams.friend === 'null' ? null : parsedURLParams.friend === 'true',\r\n        }\r\n\r\n        dispatch(requestUsers(actualPage, pageSize, actualSearchParams.term, actualSearchParams.followers))\r\n    }, [dispatch])\r\n\r\n\r\n    // Set search params to URL as query params.\r\n    useEffect(() => {\r\n        const queryURL: QueryParamsType = {}\r\n\r\n        if (search.term) queryURL.term = search.term\r\n        if (search.followers !== null) queryURL.friend = String(search.followers)\r\n        if (currentPage) queryURL.page = String(currentPage)\r\n\r\n        history.push({\r\n            pathname: PATH.USERS,\r\n            search: queryString.stringify(queryURL)\r\n        })\r\n    }, [history, search, currentPage])\r\n\r\n    return (\r\n        <>\r\n            {isLoading && <Loader/>}\r\n            <Users usersData={usersData}\r\n                   pageSize={pageSize}\r\n                   totalUsersCount={totalUsersCount}\r\n                   currentPage={currentPage}\r\n                   changeCurrentPage={changeCurrentPageHandler}\r\n                   followLoader={followLoader}\r\n                   followUser={followUserHandler}\r\n                   isAuth={isAuth}\r\n                   searchUsers={searchUsersHandler}\r\n                   searchParams={search}/>\r\n        </>\r\n    )\r\n})\r\n\r\nexport default UsersContainer"],"sourceRoot":""}