{"version":3,"sources":["components/Content/Profile/MyProfile/MyProfile.module.css","components/UI/Form/FormTextarea/FormTextarea.tsx","hoc/withAuthRedirect.tsx","components/Content/Profile/Profile.module.css","components/Content/Profile/MyProfile/MyAvatar/MyAvatar.tsx","components/Content/Profile/MyProfile/MyInfo/MyStatus/MyStatus.tsx","components/Content/Profile/MyProfile/MyInfo/MyDescription/MyContacts/MyContacts.tsx","components/Content/Profile/MyProfile/MyInfo/MyDescription/MyDescription.tsx","components/Content/Profile/MyProfile/MyInfo/MyDescriptionEditForm/MyDescriptionEditForm.tsx","components/Content/Profile/MyProfile/MyInfo/MyInfo.tsx","components/Content/Profile/MyProfile/MyProfile.tsx","components/Content/Profile/Profile.tsx","components/Content/Profile/ProfileContainer.tsx"],"names":["module","exports","FormTextarea","React","memo","props","useField","field","meta","className","s","formField","multiline","maxRows","error","touched","errorMessage","withAuthRedirect","Component","useSelector","state","auth","isAuth","to","PATH","LOGIN","MyAvatar","src","alt","isOwner","updateUserAvatar","Input","styled","display","avatarContainer","htmlFor","accept","id","multiple","type","onChange","e","currentTarget","files","value","Button","variant","component","MyStatus","status","updateUserStatus","useState","editMode","setEditMode","title","setTitle","useEffect","onEditMode","useCallback","offEditMode","onChangeHandler","onKeyPressHandler","key","TextField","onBlur","onKeyPress","autoFocus","onDoubleClick","MyContacts","contactItem","href","target","rel","MyDescription","userProfile","mappedContacts","Object","keys","contacts","map","contact","descriptionContainer","descriptionItem","aboutMe","lookingForAJob","lookingForAJobDescription","onClick","MyDescriptionEditForm","onSubmit","URLValidation","Yup","matches","contactsValidation","reduce","acc","initialValues","fullName","validationSchema","max","values","FormInput","label","name","FormCheckbox","MyInfo","userStatus","updateUserDescription","userDescription","a","infoContainer","MyProfile","avatarSRC","photos","large","wrapper","Profile","ProfileContainer","match","dispatch","useDispatch","profile","updateUserStatusHandler","updateUserAvatarHandler","avatarFile","updateUserDescriptionHandler","userID","Number","params","userId","getUserProfile","getUserStatus","compose","withRouter"],"mappings":"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","file":"static/js/3.6bf4552f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"MyProfile_wrapper__29vNC\",\"avatarContainer\":\"MyProfile_avatarContainer__1XGil\",\"infoContainer\":\"MyProfile_infoContainer__29XWR\",\"descriptionContainer\":\"MyProfile_descriptionContainer__12SFr\",\"descriptionItem\":\"MyProfile_descriptionItem__2CQIh\",\"contactItem\":\"MyProfile_contactItem__1uYBH\"};","import React from 'react'\r\nimport {useField} from 'formik'\r\nimport s from '../Form.module.css'\r\nimport {TextField} from '@mui/material'\r\n\r\ntype FormTextareaPropsType = {\r\n    label?: string\r\n    name: string\r\n    placeholder?: string\r\n    id?: string\r\n}\r\n\r\nexport const FormTextarea: React.FC<FormTextareaPropsType> = React.memo(({...props}) => {\r\n    const [field, meta] = useField(props)\r\n\r\n    return (\r\n        <div className={s.formField}>\r\n            <TextField {...field} {...props} multiline maxRows={4} error={!!meta.error}/>\r\n            {meta.touched && meta.error && <div className={s.errorMessage}>{meta.error}</div>}\r\n        </div>\r\n    )\r\n})","import React, {ComponentType} from 'react'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {useSelector} from 'react-redux'\r\nimport {PATH} from '../routes/routes'\r\nimport {RootState} from '../redux/store'\r\n\r\ntype WithAuthRedirectPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nexport const withAuthRedirect = <ComponentProps extends WithAuthRedirectPropsType>(Component: ComponentType<ComponentProps>) => {\r\n\r\n    const AuthRedirect: React.FC<WithAuthRedirectPropsType & ComponentProps> = props => {\r\n        const isAuth = useSelector<RootState>(state => state.auth.isAuth)\r\n\r\n        if (!isAuth) return <Redirect to={PATH.LOGIN}/>\r\n        return <Component {...props}/>\r\n    }\r\n\r\n    return AuthRedirect\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Profile_wrapper__26aXQ\"};","import s from '../MyProfile.module.css'\r\nimport React, {ChangeEvent} from 'react'\r\nimport {Button, styled} from '@mui/material'\r\n\r\ntype MyAvatarPropsType = {\r\n    src: string\r\n    alt: string\r\n    isOwner: boolean\r\n    updateUserAvatar: (avatarFile: File) => void\r\n}\r\n\r\nexport const MyAvatar: React.FC<MyAvatarPropsType> = React.memo(props => {\r\n    const {src, alt, isOwner, updateUserAvatar} = props\r\n\r\n    const Input = styled('input')({\r\n        display: 'none',\r\n    })\r\n\r\n    const changeAvatarHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        e.currentTarget.files && updateUserAvatar(e.currentTarget.files[0])\r\n        e.currentTarget.value = ''\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.avatarContainer}>\r\n            <img src={src} alt={alt}/>\r\n            {isOwner && <label htmlFor='uploadProfileAvatarBtn'>\r\n\t\t\t\t<Input accept='image/*'\r\n\t\t\t\t       id='uploadProfileAvatarBtn'\r\n\t\t\t\t       multiple\r\n\t\t\t\t       type='file'\r\n\t\t\t\t       onChange={changeAvatarHandler}/>\r\n\t\t\t\t<Button variant='outlined' component='span'>Upload</Button>\r\n\t\t\t</label>}\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, useCallback, useEffect, useState} from 'react'\r\nimport {TextField} from '@mui/material'\r\n\r\ntype MyStatusPropsType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n}\r\n\r\nexport const MyStatus: React.FC<MyStatusPropsType> = React.memo(props => {\r\n    const {status, updateUserStatus, isOwner} = props\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.status)\r\n\r\n    useEffect(() => setTitle(status), [status])\r\n\r\n    const onEditMode = useCallback(() => setEditMode(true), [])\r\n\r\n    const offEditMode = useCallback(() => {\r\n        updateUserStatus(title)\r\n        setEditMode(false)\r\n    }, [title, updateUserStatus])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }, [])\r\n\r\n    const onKeyPressHandler = useCallback((e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') offEditMode()\r\n    }, [offEditMode])\r\n\r\n    return isOwner && editMode\r\n        ? <TextField type='text'\r\n                     onBlur={offEditMode}\r\n                     onChange={onChangeHandler}\r\n                     onKeyPress={onKeyPressHandler}\r\n                     autoFocus\r\n                     value={title}/>\r\n        : <h4 onDoubleClick={onEditMode}>{status || 'Место для статуса'}</h4>\r\n})","import React from 'react'\r\nimport s from '../../../MyProfile.module.css'\r\n\r\ntype MyInfoContactsPropsType = {\r\n    title: string\r\n    value: string\r\n}\r\nexport const MyContacts: React.FC<MyInfoContactsPropsType> = React.memo(props => {\r\n    const {title, value} = props\r\n\r\n    return (\r\n        <div className={s.contactItem}>\r\n            {value &&\r\n\t\t\t<>\r\n\t\t\t\t<span>{title}</span>\r\n\t\t\t\t<span><a href={`${value}`} target='_blank' rel='noreferrer'>{value}</a></span>\r\n\t\t\t</>}\r\n        </div>\r\n    )\r\n})","import React from 'react'\r\nimport s from '../../MyProfile.module.css'\r\nimport {UserProfileContactsType, UserProfileType} from '../../../../../../types/profile-types'\r\nimport {MyContacts} from './MyContacts/MyContacts'\r\nimport {Button} from '@mui/material'\r\n\r\ntype MyProfileDescriptionType = {\r\n    userProfile: UserProfileType\r\n    isOwner: boolean\r\n    onEditMode: () => void\r\n}\r\n\r\nexport const MyDescription: React.FC<MyProfileDescriptionType> = React.memo(props => {\r\n    const {userProfile, isOwner, onEditMode} = props\r\n\r\n    const mappedContacts = Object.keys(userProfile.contacts)\r\n        .map(contact => <MyContacts key={contact}\r\n                                    title={contact}\r\n                                    value={userProfile.contacts[contact as keyof UserProfileContactsType]}/>)\r\n\r\n    return (\r\n        <div className={s.descriptionContainer}>\r\n            <div className={s.descriptionItem}>\r\n                <strong>About me:</strong>\r\n                {userProfile.aboutMe || 'Empty'}\r\n            </div>\r\n\r\n            <div className={s.descriptionItem}>\r\n                <strong>Looking for a job:</strong>\r\n                {userProfile.lookingForAJob ? 'Yes' : 'No'}\r\n            </div>\r\n\r\n            <div className={s.descriptionItem}>\r\n                <strong>Looking for a job description:</strong>\r\n                {userProfile.lookingForAJobDescription || 'Empty'}\r\n            </div>\r\n\r\n            <div className={s.descriptionItem}>\r\n                <strong>Contacts</strong>\r\n                {mappedContacts}\r\n            </div>\r\n\r\n            {isOwner && <Button onClick={onEditMode} variant='contained'>Edit</Button>}\r\n        </div>\r\n    )\r\n})","import React from 'react'\r\nimport {Form, Formik} from 'formik'\r\nimport {FormInput} from '../../../../../UI/Form/FormInput/FormInput'\r\nimport {FormCheckbox} from '../../../../../UI/Form/FormCheckbox/FormCheckbox'\r\nimport {FormTextarea} from '../../../../../UI/Form/FormTextarea/FormTextarea'\r\nimport {UserProfileType} from '../../../../../../types/profile-types'\r\nimport * as Yup from 'yup'\r\nimport {Button} from '@mui/material'\r\n\r\ntype MyDescriptionEditFormType = {\r\n    onSubmit: (userDescription: any) => void\r\n    userProfile: UserProfileType\r\n}\r\n\r\nexport const MyDescriptionEditForm: React.FC<MyDescriptionEditFormType> = React.memo(props => {\r\n    const {onSubmit, userProfile} = props\r\n\r\n    const URLValidation = Yup.string()\r\n        .matches(/((https?):\\/\\/)?(www.)?[a-z0-9]+(\\.[a-z]{2,}){1,3}(#?\\/?[a-zA-Z0-9#]+)*\\/?(\\?[a-zA-Z0-9-_]+=[a-zA-Z0-9-%]+&?)?$/,\r\n            'Enter correct url!')\r\n\r\n    const contactsValidation = Object\r\n        .keys(userProfile.contacts)\r\n        .reduce((acc: any, value) => (acc[value] = URLValidation, acc), {})\r\n\r\n    return <Formik\r\n        initialValues={{\r\n            fullName: userProfile.fullName,\r\n            aboutMe: userProfile.aboutMe,\r\n            lookingForAJob: userProfile.lookingForAJob,\r\n            lookingForAJobDescription: userProfile.lookingForAJobDescription,\r\n            contacts: userProfile.contacts\r\n        }}\r\n\r\n        validationSchema={Yup.object({\r\n            fullName: Yup.string()\r\n                .max(50, 'Must be 50 characters or less'),\r\n            aboutMe: Yup.string()\r\n                .max(300, 'Must be 300 characters or less'),\r\n            lookingForAJobDescription: Yup.string()\r\n                .max(300, 'Must be 300 characters or less'),\r\n            contacts: Yup.object(contactsValidation)\r\n        })}\r\n\r\n        onSubmit={(values) => {\r\n            onSubmit(values)\r\n        }}>\r\n\r\n        {() => <Form className={'formikFormContainer'}>\r\n            <h4>Main info</h4>\r\n\r\n            <FormInput label='Full Name' name='fullName' type='text'/>\r\n\r\n            <FormTextarea label={'About'} name={'aboutMe'}/>\r\n\r\n            <FormCheckbox name='lookingForAJob' label={'Looking For A Job'}/>\r\n\r\n            <FormTextarea label={'Looking For A Job Description'} name={'lookingForAJobDescription'}/>\r\n\r\n            <h4>Contacts</h4>\r\n            {Object\r\n                .keys(userProfile.contacts)\r\n                .map(contact => <FormInput key={contact}\r\n                                           label={`${contact}`}\r\n                                           name={`contacts.${contact}`}\r\n                                           type='text'/>)}\r\n\r\n            <Button type='submit' variant={'contained'}>Save</Button>\r\n        </Form>}\r\n    </Formik>\r\n})","import s from '../MyProfile.module.css'\r\nimport React, {useState} from 'react'\r\nimport {MyStatus} from './MyStatus/MyStatus'\r\nimport {MyDescription} from './MyDescription/MyDescription'\r\nimport {MyDescriptionEditForm} from './MyDescriptionEditForm/MyDescriptionEditForm'\r\nimport {UserProfileType} from '../../../../../types/profile-types'\r\n\r\ntype MyInfoPropsType = {\r\n    userProfile: UserProfileType\r\n    userStatus: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    updateUserDescription: (userDescription: UserProfileType) => void\r\n}\r\n\r\nexport const MyInfo: React.FC<MyInfoPropsType> = React.memo(props => {\r\n    const {userProfile, userStatus, updateUserStatus, isOwner, updateUserDescription} = props\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n\r\n    const offEditMode = async (userDescription: UserProfileType) => {\r\n        await updateUserDescription(userDescription)\r\n        setEditMode(false)\r\n    }\r\n\r\n    return (\r\n        <div className={s.infoContainer}>\r\n            <h2>{userProfile.fullName}</h2>\r\n\r\n            <MyStatus status={userStatus}\r\n                      updateUserStatus={updateUserStatus}\r\n                      isOwner={isOwner}/>\r\n\r\n            {!editMode\r\n                ? <MyDescription userProfile={userProfile}\r\n                                 isOwner={isOwner}\r\n                                 onEditMode={onEditMode}/>\r\n\r\n                : <MyDescriptionEditForm onSubmit={offEditMode}\r\n                                         userProfile={userProfile}/>}\r\n        </div>\r\n    )\r\n})","import React from 'react'\r\nimport s from './MyProfile.module.css'\r\nimport {MyAvatar} from './MyAvatar/MyAvatar'\r\nimport {MyInfo} from './MyInfo/MyInfo'\r\nimport {UserProfileType} from '../../../../types/profile-types'\r\n\r\ntype MyProfilePropsType = {\r\n    userProfile: UserProfileType\r\n    userStatus: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    updateUserAvatar: (avatarFile: File) => void\r\n    updateUserDescription: (userDescription: UserProfileType) => void\r\n}\r\n\r\nexport const MyProfile: React.FC<MyProfilePropsType> = React.memo(props => {\r\n    const {userProfile, userStatus, updateUserStatus, isOwner, updateUserAvatar, updateUserDescription} = props\r\n\r\n    const avatarSRC = userProfile.photos.large || 'https://pbs.twimg.com/profile_images/1368235617243426820/L0m5gTDB.jpg'\r\n\r\n    return (\r\n        <section className={s.wrapper}>\r\n            <MyAvatar\r\n                src={avatarSRC}\r\n                alt={userProfile.fullName}\r\n                isOwner={isOwner}\r\n                updateUserAvatar={updateUserAvatar}/>\r\n\r\n            <MyInfo userProfile={userProfile}\r\n                    userStatus={userStatus}\r\n                    updateUserStatus={updateUserStatus}\r\n                    isOwner={isOwner}\r\n                    updateUserDescription={updateUserDescription}/>\r\n        </section>\r\n    )\r\n})","import React from 'react'\r\nimport s from './Profile.module.css'\r\nimport {MyProfile} from './MyProfile/MyProfile'\r\nimport {UserProfileType} from '../../../types/profile-types'\r\n\r\ntype ProfilePropsType = {\r\n    userProfile: UserProfileType | null\r\n    userStatus: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    updateUserAvatar: (avatarFile: File) => void\r\n    updateUserDescription: (userDescription: UserProfileType) => void\r\n}\r\n\r\nexport const Profile: React.FC<ProfilePropsType> = React.memo(props => {\r\n    const {\r\n        userProfile,\r\n        userStatus,\r\n        updateUserStatus,\r\n        isOwner,\r\n        updateUserAvatar,\r\n        updateUserDescription\r\n    } = props\r\n\r\n    return (\r\n        <main className={s.wrapper}>\r\n            {userProfile && <MyProfile userProfile={userProfile}\r\n\t\t\t                           userStatus={userStatus}\r\n\t\t\t                           updateUserStatus={updateUserStatus}\r\n\t\t\t                           isOwner={isOwner}\r\n\t\t\t                           updateUserAvatar={updateUserAvatar}\r\n\t\t\t                           updateUserDescription={updateUserDescription}/>}\r\n        </main>\r\n    )\r\n})","import React, {ComponentType, useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {Profile} from './Profile'\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom'\r\nimport {ProfileType, UserProfileType} from '../../../types/profile-types'\r\nimport {compose} from 'redux'\r\nimport {withAuthRedirect} from '../../../hoc/withAuthRedirect'\r\nimport {AuthType} from '../../../types/auth-types'\r\nimport {RootState} from '../../../redux/store'\r\nimport {\r\n    getUserProfile,\r\n    getUserStatus,\r\n    updateUserAvatar,\r\n    updateUserDescription,\r\n    updateUserStatus\r\n} from '../../../redux/reducers/profile-reducer'\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\nconst ProfileContainer: React.FC<RouteComponentProps<PathParamsType>> = React.memo(props => {\r\n    const {match} = props\r\n\r\n    const dispatch = useDispatch()\r\n    const {userProfile, userStatus} = useSelector<RootState, ProfileType>(state => state.profile)\r\n    const {id} = useSelector<RootState, AuthType>(state => state.auth)\r\n\r\n    const updateUserStatusHandler = useCallback((status: string) => dispatch(updateUserStatus(status)), [dispatch])\r\n    const updateUserAvatarHandler = useCallback((avatarFile: File) => dispatch(updateUserAvatar(avatarFile)), [dispatch])\r\n    const updateUserDescriptionHandler = useCallback((userDescription: UserProfileType) => dispatch(updateUserDescription(userDescription)), [dispatch])\r\n\r\n    useEffect(() => {\r\n        const userID: number | null = Number(match.params.userId) || id\r\n\r\n        dispatch(getUserProfile(userID))\r\n        dispatch(getUserStatus(userID))\r\n    }, [dispatch, match.params.userId, id])\r\n\r\n    const isOwner = !match.params.userId || (id !== null && id === Number(match.params.userId))\r\n\r\n    return <Profile userProfile={userProfile}\r\n                    userStatus={userStatus}\r\n                    updateUserStatus={updateUserStatusHandler}\r\n                    isOwner={isOwner}\r\n                    updateUserAvatar={updateUserAvatarHandler}\r\n                    updateUserDescription={updateUserDescriptionHandler}/>\r\n})\r\n\r\nexport default compose<ComponentType>(withAuthRedirect, withRouter)(ProfileContainer)"],"sourceRoot":""}